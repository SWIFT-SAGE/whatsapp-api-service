<!-- Dashboard View -->
<div id="dashboard-view" class="view" style="display: none;">
    <style>
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.95);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            border-radius: 8px;
            backdrop-filter: blur(2px);
        }
        
        .loading-content {
            text-align: center;
            padding: 2rem;
        }
        
        .loading-content .spinner-border {
            width: 3rem;
            height: 3rem;
        }
        
        .dashboard-section {
            position: relative;
            min-height: 200px;
        }
    </style>
    <div class="dashboard-container">
        <div class="container-fluid">
            <div class="row">
                <!-- Sidebar -->
                <div class="col-lg-3 col-xl-2 px-0">
                    <div class="sidebar">
                        <div class="sidebar-header">
                            <h5><i class="fas fa-tachometer-alt me-2"></i>Dashboard</h5>
                        </div>
                        <nav class="sidebar-nav">
                            <a href="#" class="nav-link active" data-section="overview">
                                <i class="fas fa-chart-line me-2"></i>Overview
                            </a>
                            <a href="#" class="nav-link" data-section="sessions">
                                <i class="fas fa-mobile-alt me-2"></i>Sessions
                            </a>
                            <a href="#" class="nav-link" data-section="messages">
                                <i class="fas fa-comments me-2"></i>Messages
                            </a>
                            <a href="#" class="nav-link" data-section="chatbot" id="chatbot-nav" style="display: none;">
                                <i class="fas fa-robot me-2"></i>Chatbot
                            </a>
                            <a href="#" class="nav-link" data-section="webhooks">
                                <i class="fas fa-webhook me-2"></i>Webhooks
                            </a>
                            <a href="#" class="nav-link" data-section="analytics">
                                <i class="fas fa-chart-bar me-2"></i>Analytics
                            </a>
                            <a href="#" class="nav-link" data-section="billing">
                                <i class="fas fa-credit-card me-2"></i>Billing
                            </a>
                            <a href="#" class="nav-link" data-section="profile">
                                <i class="fas fa-user me-2"></i>Profile
                            </a>
                            <a href="#" class="nav-link" data-view="api-docs">
                                <i class="fas fa-code me-2"></i>API Docs
                            </a>
                        </nav>
                    </div>
                </div>

                <!-- Main Content -->
                <div class="col-lg-9 col-xl-10">
                    <div class="dashboard-content">
                        <!-- Dynamic Content Container -->
                        <div id="dashboard-content-container">
                            <!-- Content will be loaded dynamically here -->
                        </div>



                    </div>
                </div>

                <!-- Modal cleanup script -->
                <script>
                    // Clean up modal backdrop when QR code modal is closed
                    document.addEventListener('DOMContentLoaded', function() {
                        const qrModal = document.getElementById('qrCodeModal');
                        if (qrModal) {
                            qrModal.addEventListener('hidden.bs.modal', function() {
                                // Remove any lingering backdrop
                                const backdrops = document.querySelectorAll('.modal-backdrop');
                                backdrops.forEach(backdrop => backdrop.remove());
                                
                                // Remove modal-open class from body
                                document.body.classList.remove('modal-open');
                                
                                // Reset body style
                                document.body.style.overflow = '';
                                document.body.style.paddingRight = '';
                                
                            });
                        }
                    });
                </script>

                <!-- Session button group styling -->
                <style>
                    .btn-group .btn {
                        margin-right: 2px;
                    }
                    .btn-group .btn:last-child {
                        margin-right: 0;
                    }
                    .btn-group .btn-sm {
                        font-size: 0.75rem;
                        padding: 0.25rem 0.5rem;
                    }
                    .session-card .btn-group {
                        margin-top: 0.5rem;
                    }
                </style>
            </div>
        </div>
    </div>
</div>

<script>
    // Global API functions - defined before DOMContentLoaded
    window.getApiKey = function getApiKey() {
        // Use comprehensive API key checking (same as loadSessionsData)
        let apiKey = '';
        
        // Check window.currentUser first (updated by dashboard)
        if (window.currentUser && window.currentUser.apiKey) {
            apiKey = window.currentUser.apiKey;
        }
        
        // Also check sessionStorage for the most recent user data
        const storedUser = sessionStorage.getItem('currentUser');
        if (storedUser && !apiKey) {
            try {
                const userObj = JSON.parse(storedUser);
                if (userObj.apiKey && userObj.apiKey !== 'Not generated') {
                    apiKey = userObj.apiKey;
                }
            } catch (e) {
                console.error('Error parsing stored user:', e);
            }
        }
        
        // Fallback to input field if available (on overview page)
        if (!apiKey) {
            const apiKeyInput = document.getElementById('api-key');
            if (apiKeyInput && apiKeyInput.value && apiKeyInput.value !== 'Not generated') {
                apiKey = apiKeyInput.value;
            }
        }
        
        return apiKey;
    }

    function getJwtToken() {
        const token = sessionStorage.getItem('authToken');
        if (!token || token === 'undefined' || token === 'null') {
            return null;
        }
        return token;
    }

    function getApiKeyHeaders() {
        const apiKey = getApiKey();
        if (!apiKey) {
            throw new Error('API key not found. Please generate an API key first.');
        }
        return {
            'Content-Type': 'application/json',
            'x-api-key': apiKey
        };
    }

    function getJwtHeaders() {
        const token = getJwtToken();
        return {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
        };
    }

    // Make makeApiCall globally available
    window.makeApiCall = async function makeApiCall(endpoint, options = {}) {
        try {
            // Check if user is logged in first
            const isLoggedIn = sessionStorage.getItem('isLoggedIn') === 'true';
            if (!isLoggedIn) {
                throw new Error('User not logged in');
            }

            // Determine authentication method based on endpoint
            let headers;
            if (endpoint.includes('/api/whatsapp/')) {
                headers = getApiKeyHeaders();
            } else if (endpoint.includes('/api/analytics/') || endpoint.includes('/api/user/') || endpoint.includes('/api/auth/')) {
                headers = getJwtHeaders();
            } else {
                headers = getJwtHeaders();
            }

            const response = await fetch(endpoint, {
                headers: {
                    ...headers,
                    ...options.headers
                },
                ...options
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                if (response.status === 401) {
                    if (errorData.error === 'Access token required') {
                        throw new Error('Please log in to access this feature.');
                    } else if (errorData.error === 'API key required') {
                        throw new Error('Please generate an API key first.');
                    } else if (errorData.error === 'Invalid API key') {
                        throw new Error('Invalid API key. Please generate a new one.');
                    }
                }
                throw new Error(errorData.message || errorData.error || `HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            if (!error.message.includes('not logged in') &&
                !error.message.includes('log in') &&
                !error.message.includes('API key')) {
                console.error('API call failed:', error);
            }
            throw error;
        }
    }

    // Dashboard functionality
    document.addEventListener('DOMContentLoaded', function () {
        // Global cleanup function for modal backdrops
        window.cleanupModalBackdrops = function cleanupModalBackdrops() {
            const backdrops = document.querySelectorAll('.modal-backdrop');
            backdrops.forEach(backdrop => backdrop.remove());
            document.body.classList.remove('modal-open');
            document.body.style.overflow = '';
            document.body.style.paddingRight = '';
            console.log('Modal backdrops cleaned up manually');
        };
        
        // Utility functions for loading states and errors
        function showLoading(section) {
            const sectionElement = document.getElementById(`dashboard-${section}`);
            if (sectionElement) {
                // Create loading overlay
                const loadingOverlay = document.createElement('div');
                loadingOverlay.id = `loading-${section}`;
                loadingOverlay.className = 'loading-overlay';
                loadingOverlay.innerHTML = `
                    <div class="loading-content">
                        <div class="spinner-border text-primary mb-3" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="text-muted">Loading ${section} data...</p>
                    </div>
                `;
                
                // Add loading overlay
                sectionElement.appendChild(loadingOverlay);
            }
        }

        function hideLoading(section) {
            const sectionElement = document.getElementById(`dashboard-${section}`);
            if (sectionElement) {
                const loadingOverlay = document.getElementById(`loading-${section}`);
                if (loadingOverlay) {
                    loadingOverlay.remove();
                }
            }
        }

        function showError(section, message) {
            const sectionElement = document.getElementById(`dashboard-${section}`);
            if (sectionElement) {
                const errorDiv = document.createElement('div');
                errorDiv.className = 'alert alert-danger';
                errorDiv.textContent = message;
                sectionElement.appendChild(errorDiv);
            }
        }
        
        // Additional utility functions
        function calculateDeliveryRate(stats) {
            if (!stats.sentMessages || stats.sentMessages === 0) return '0.0';
            const delivered = stats.messageStatus?.delivered || 0;
            return ((delivered / stats.sentMessages) * 100).toFixed(1);
        }

        function updateElement(id, value) {
            const element = document.getElementById(id);
            if (element) {
                if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
                    element.value = value;
                } else {
                    element.textContent = value;
                }
                console.log(`Updated ${id}:`, value); // Debug log
            } else {
                console.log(`Element with id '${id}' not found (this is normal if not on overview page)`); // Debug log
            }
        }
        
        // makeApiCall is now globally available from above
        
        // Section data loading functions
        async function loadSessionsData() {
            try {
                showLoading('sessions');

                // Check if user is logged in
                const isLoggedIn = sessionStorage.getItem('isLoggedIn') === 'true';
                if (!isLoggedIn) {
                    showError('sessions', 'Please log in to view sessions');
                    hideLoading('sessions');
                    return;
                }

                // Check if API key exists for WhatsApp endpoints
                let apiKey = '';
                
                // Check window.currentUser first (updated by dashboard)
                if (window.currentUser && window.currentUser.apiKey) {
                    apiKey = window.currentUser.apiKey;
                }
                
                // Also check sessionStorage for the most recent user data
                const storedUser = sessionStorage.getItem('currentUser');
                if (storedUser && !apiKey) {
                    try {
                        const userObj = JSON.parse(storedUser);
                        if (userObj.apiKey && userObj.apiKey !== 'Not generated') {
                            apiKey = userObj.apiKey;
                        }
                    } catch (e) {
                        console.error('Error parsing stored user:', e);
                    }
                }
                
                console.log('loadSessionsData - API key check:', {
                    windowCurrentUserApiKey: window.currentUser?.apiKey,
                    sessionStorageApiKey: storedUser ? JSON.parse(storedUser).apiKey : 'none',
                    finalApiKey: apiKey
                });

                if (!apiKey || apiKey === 'Not generated') {
                    showError('sessions', 'Please generate an API key first');
                    hideLoading('sessions');
                    return;
                }

                const response = await makeApiCall('/api/whatsapp/sessions');
                console.log('Sessions API response:', response);
                
                // Handle different response structures
                const sessions = response.data?.sessions || response.sessions || response.data || response;
                
                // Ensure sessions is an array
                if (!Array.isArray(sessions)) {
                    console.error('Sessions data is not an array:', sessions);
                    showError('sessions', 'Invalid sessions data format');
                    hideLoading('sessions');
                    return;
                }

                // Update sessions container
                const sessionsContainer = document.getElementById('sessions-container');
                if (!sessionsContainer) {
                    console.error('Sessions container not found');
                    showError('sessions', 'Sessions container not found in DOM');
                    hideLoading('sessions');
                    return;
                }

                if (sessions && sessions.length > 0) {
                    sessionsContainer.innerHTML = sessions.map((session, index) => `
                        <div class="col-md-6">
                            <div class="card session-card">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start mb-3">
                                        <h5>Session #${index + 1}</h5>
                                        <span class="badge ${session.status === 'connected' ? 'bg-success' : session.status === 'connecting' ? 'bg-warning' : 'bg-secondary'}">
                                            ${session.status ? session.status.charAt(0).toUpperCase() + session.status.slice(1) : 'Unknown'}
                                        </span>
                                    </div>
                                    <p><strong>Session ID:</strong> ${session.sessionId}</p>
                                    <p><strong>Phone:</strong> ${session.phoneNumber || 'Not connected'}</p>
                                    <p><strong>Status:</strong> ${session.status || 'unknown'}</p>
                                    <p><strong>Created:</strong> ${new Date(session.createdAt).toLocaleDateString()}</p>
                                    <div class="btn-group" role="group">
                                        ${session.status === 'connected' ? 
                                            `<button class="btn btn-outline-danger btn-sm disconnect-session-btn" data-session-id="${session.sessionId}">
                                                <i class="fas fa-unlink me-1"></i>Disconnect
                                            </button>` : 
                                            `<button class="btn btn-outline-primary btn-sm connect-session-btn" data-session-id="${session.sessionId}">
                                                <i class="fas fa-link me-1"></i>Connect
                                            </button>`
                                        }
                                        <button class="btn btn-outline-danger btn-sm delete-session-btn" data-session-id="${session.sessionId}" title="Delete Session">
                                            <i class="fas fa-trash me-1"></i>Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `).join('');
                } else {
                    sessionsContainer.innerHTML = `
                        <div class="col-12">
                            <div class="text-center py-5">
                                <i class="fas fa-mobile-alt fa-3x text-muted mb-3"></i>
                                <h5 class="text-muted">No sessions yet</h5>
                                <p class="text-muted">Create your first WhatsApp session to get started</p>
                                <button class="btn btn-primary" id="create-first-session-btn">
                                    <i class="fas fa-plus me-2"></i>Create Session
                                </button>
                            </div>
                        </div>
                    `;
                }

                // Re-initialize session buttons after updating the DOM
                initializeSessionButtons();

                hideLoading('sessions');
            } catch (error) {
                console.error('Error loading sessions data:', error);
                hideLoading('sessions');

                if (error.message.includes('log in')) {
                    showError('sessions', 'Please log in to view sessions');
                } else if (error.message.includes('API key')) {
                    showError('sessions', 'Please generate an API key first');
                } else {
                    showError('sessions', 'Failed to load sessions data: ' + error.message);
                }
            }
        }
        
        // Make loadSessionsData globally available
        window.loadSessionsData = loadSessionsData;

        // Load messages data
        async function loadMessagesData() {
            try {
                showLoading('messages');
                const response = await makeApiCall('/api/analytics/messages?period=7d');
                
                const timeSeries = response.data?.timeSeries || response.timeSeries || [];
                
                if (!Array.isArray(timeSeries)) {
                    console.error('TimeSeries data is not an array:', timeSeries);
                    showError('messages', 'Invalid messages data format');
                    hideLoading('messages');
                    return;
                }

                const messagesTable = document.getElementById('messages-table');
                if (timeSeries && timeSeries.length > 0) {
                    messagesTable.innerHTML = timeSeries.slice(0, 10).map((item, index) => `
                        <tr>
                            <td><code>msg_${index + 1}</code></td>
                            <td>+1234567890</td>
                            <td>Sample message from ${item._id}</td>
                            <td><span class="badge bg-success">Delivered</span></td>
                            <td>${new Date().toLocaleTimeString()}</td>
                        </tr>
                    `).join('');
                } else {
                    messagesTable.innerHTML = `
                        <tr>
                            <td colspan="5" class="text-center text-muted">No messages found</td>
                        </tr>
                    `;
                }

                hideLoading('messages');
            } catch (error) {
                console.error('Error loading messages data:', error);
                hideLoading('messages');
                showError('messages', 'Failed to load messages data');
            }
        }

        async function loadWebhooksData() {
            try {
                showLoading('webhooks');
                hideLoading('webhooks');
            } catch (error) {
                console.error('Error loading webhooks data:', error);
                hideLoading('webhooks');
                showError('webhooks', 'Failed to load webhooks data');
            }
        }

        async function loadAnalyticsData() {
            try {
                showLoading('analytics');
                const response = await makeApiCall('/api/analytics/dashboard?period=30d');
                
                const stats = response.data?.overview || response.overview || {};
                
                // Update analytics charts and data
                updateElement('analytics-messages', (stats.totalMessages || 0).toLocaleString());
                updateElement('analytics-sessions', stats.totalSessions || 0);
                updateElement('analytics-delivery-rate', calculateDeliveryRate(stats) + '%');

                hideLoading('analytics');
            } catch (error) {
                console.error('Error loading analytics data:', error);
                hideLoading('analytics');
                showError('analytics', 'Failed to load analytics data');
            }
        }

        async function loadBillingData() {
            try {
                showLoading('billing');
                const response = await makeApiCall('/api/auth/profile');
                
                const user = response.data?.user || response.user || response;
                const subscription = user.subscription || {};
                
                // Update billing information
                updateElement('current-plan', subscription.plan || 'Free');
                updateElement('billing-status', subscription.status || 'Active');

                hideLoading('billing');
            } catch (error) {
                console.error('Error loading billing data:', error);
                hideLoading('billing');
                showError('billing', 'Failed to load billing data');
            }
        }

        async function loadProfileData() {
            try {
                console.log('loadProfileData called');
                showLoading('profile');
                const response = await makeApiCall('/api/auth/profile');
                console.log('Profile API response:', response);
                
                const user = response.data?.user || response.user || response;
                console.log('User data:', user);
                
                // Update profile form fields
                updateElement('profile-name', user.name || '');
                updateElement('profile-email', user.email || '');
                updateElement('profile-phone', user.phone || '');
                updateElement('profile-company', user.company || '');
                
                // Update verification status
                const verificationBadge = document.getElementById('verification-status');
                if (verificationBadge) {
                    if (user.isVerified) {
                        verificationBadge.innerHTML = '<span class="badge bg-success"><i class="fas fa-check-circle"></i> Verified</span>';
                    } else {
                        verificationBadge.innerHTML = '<span class="badge bg-warning"><i class="fas fa-exclamation-circle"></i> Unverified</span>';
                    }
                }

                hideLoading('profile');
            } catch (error) {
                console.error('Error loading profile data:', error);
                hideLoading('profile');
                showError('profile', 'Failed to load profile data');
            }
        }
        
        // Load section-specific data
        async function loadSectionData(section) {
            console.log('loadSectionData called with section:', section);
            switch (section) {
                case 'overview':
                    await loadDashboardData();
                    break;
                case 'sessions':
                    await loadSessionsData();
                    break;
                case 'messages':
                    await loadMessagesData();
                    break;
                case 'webhooks':
                    await loadWebhooksData();
                    break;
                case 'analytics':
                    await loadAnalyticsData();
                    break;
                case 'billing':
                    await loadBillingData();
                    break;
                case 'profile':
                    console.log('Loading profile data...');
                    await loadProfileData();
                    break;
            }
        }
        
        // Load section page dynamically
        async function loadSectionPage(section) {
            console.log('loadSectionPage called with section:', section);
            console.log('Auth token available:', !!sessionStorage.getItem('authToken'));
            
            try {
                // Show loading state
                const contentContainer = document.getElementById('dashboard-content-container');
                if (contentContainer) {
                    contentContainer.innerHTML = `
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary mb-3" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="text-muted">Loading ${section} page...</p>
                        </div>
                    `;
                }

                // Load the section page content
                console.log(`Fetching section: /api/dashboard/section/${section}`);
                const response = await fetch(`/api/dashboard/section/${section}`, {
                    headers: {
                        'Authorization': `Bearer ${sessionStorage.getItem('authToken')}`,
                        'Content-Type': 'application/json'
                    }
                });
                console.log(`Response status: ${response.status} ${response.statusText}`);
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error(`Error response body:`, errorText);
                    throw new Error(`Failed to load ${section} page: ${response.statusText} - ${errorText}`);
                }
                
                const html = await response.text();
                if (contentContainer) {
                    contentContainer.innerHTML = html;
                }

                // Load section-specific data after page is loaded
                await loadSectionData(section);
                
                // Re-initialize API key buttons if we're on the overview section
                if (section === 'overview') {
                    setTimeout(() => {
                        initializeApiKeyButtons();
                    }, 100);
                }
                
                // Initialize session buttons if we're on the sessions section
                if (section === 'sessions') {
                    setTimeout(() => {
                        initializeSessionButtons();
                    }, 100);
                }
                
            } catch (error) {
                console.error('Error loading section page:', error);
                const contentContainer = document.getElementById('dashboard-content-container');
                if (contentContainer) {
                    contentContainer.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Error loading ${section} page: ${error.message}
                        </div>
                    `;
                }
            }
        }
        
        // Load dashboard overview data
        async function loadDashboardData() {
            try {
                showLoading('overview');

                // Check if user is logged in
                const isLoggedIn = sessionStorage.getItem('isLoggedIn') === 'true';
                if (!isLoggedIn) {
                    // Show default data for non-logged in users
                    updateElement('messages-sent', '0');
                    updateElement('active-sessions', '0');
                    updateElement('delivery-rate', '0%');
                    updateElement('total-sessions', '0');
                    updateElement('plan-badge', 'Free Plan');
                    hideLoading('overview');
                    return;
                }

                // Check if JWT token exists
                const token = sessionStorage.getItem('authToken');
                if (!token) {
                    updateElement('messages-sent', '0');
                    updateElement('active-sessions', '0');
                    updateElement('delivery-rate', '0%');
                    updateElement('total-sessions', '0');
                    updateElement('plan-badge', 'Free Plan');
                    hideLoading('overview');
                    return;
                }

                const response = await makeApiCall('/api/analytics/dashboard?period=30d');
                const stats = response.data.overview;

                // Update stats cards
                updateElement('messages-sent', (stats.totalMessages || 0).toLocaleString());
                updateElement('active-sessions', stats.activeSessions || 0);
                updateElement('delivery-rate', calculateDeliveryRate(stats) + '%');
                updateElement('total-sessions', stats.totalSessions || 0);

                // Update plan badge
                updateElement('plan-badge', stats.plan ? stats.plan.charAt(0).toUpperCase() + stats.plan.slice(1) + ' Plan' : 'Free Plan');

                hideLoading('overview');
            } catch (error) {
                console.error('Error loading dashboard data:', error);
                hideLoading('overview');

                // Show user-friendly error message
                if (error.message.includes('log in')) {
                    showError('overview', 'Please log in to view dashboard data');
                } else {
                    showError('overview', 'Failed to load dashboard data: ' + error.message);
                }
            }
        }
        
        // Clean up any existing modal backdrops first
        cleanupModalBackdrops();
        
        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        })

        // Dashboard tab navigation
        const sidebarLinks = document.querySelectorAll('.sidebar-nav .nav-link[data-section]');
        const contentContainer = document.getElementById('dashboard-content-container');

        sidebarLinks.forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                e.stopPropagation(); // Prevent event bubbling to avoid double execution

                // Remove active class from all links
                sidebarLinks.forEach(l => l.classList.remove('active'));
                // Add active class to clicked link
                this.classList.add('active');

                // Get target section
                const targetSection = this.getAttribute('data-section');
                console.log('Switching to section:', targetSection);
                
                // Load the section page dynamically
                loadSectionPage(targetSection);
            });
        });

        // Load initial data with a small delay to ensure authentication is ready
        setTimeout(async () => {
            await loadDashboardData();
            await loadSectionPage('overview');

            // Initialize API key buttons after data is loaded
        initializeApiKeyButtons();
        }, 100);

        // Generate API key functionality
        const generateBtn = document.getElementById('generate-api-key');
        if (generateBtn) {
            generateBtn.addEventListener('click', async function () {
                try {
                    const data = await makeApiCall('/api/auth/generate-api-key', {
                        method: 'POST'
                    });


                    // Get reference to the API key input field
                    const apiKeyInputField = document.getElementById('api-key');

                    // Update the input field - handle different response structures
                    const apiKey = data?.apiKey || data.apiKey || data.data?.data?.apiKey;
                    if (apiKey && apiKeyInputField) {
                        apiKeyInputField.value = apiKey;

                        // Update currentUser object with new API key
                        if (window.currentUser) {
                            window.currentUser.apiKey = apiKey;
                            console.log('Updated window.currentUser.apiKey:', apiKey);
                        }
                        
                        // Also update sessionStorage
                        const storedUser = sessionStorage.getItem('currentUser');
                        if (storedUser) {
                            try {
                                const userObj = JSON.parse(storedUser);
                                userObj.apiKey = apiKey;
                                sessionStorage.setItem('currentUser', JSON.stringify(userObj));
                                console.log('Updated sessionStorage currentUser with new API key');
                            } catch (e) {
                                console.error('Error updating sessionStorage user:', e);
                            }
                        }

                        // Reload sessions if loadSessions function exists
                        if (typeof loadSessions === 'function') {
                            loadSessions();
                        }
                        
                        // Also call the global refresh function if available
                        if (typeof window.refreshSessions === 'function') {
                            window.refreshSessions();
                        }
                        
                        // If we're currently on the sessions page, reload it
                        const currentSection = document.querySelector('.sidebar-nav .nav-link.active')?.getAttribute('data-section');
                        if (currentSection === 'sessions') {
                            setTimeout(() => {
                                loadSectionPage('sessions');
                            }, 500);
                        }
                    } else if (!apiKey) {
                        throw new Error('API key not found in response');
                    } else {
                        throw new Error('API key input field not found');
                    }

                    // Replace generate button with toggle and copy buttons
                    const inputGroup = generateBtn.parentElement;
                    generateBtn.outerHTML = `
                            <button class="btn btn-outline-secondary" type="button" id="toggle-api-key">
                                <i class="fas fa-eye" id="api-key-icon"></i>
                            </button>
                            <button class="btn btn-outline-secondary" type="button" id="copy-api-key">
                                <i class="fas fa-copy"></i>
                            </button>
                        `;

                    // Re-initialize API key buttons after generating new key
                    setTimeout(() => {
                        initializeApiKeyButtons();
                    }, 100);

                } catch (error) {
                    alert('Error generating API key: ' + error.message);
                }
            });
        }

        // Session management - use event delegation for dynamic content
        document.addEventListener('click', async function (e) {
            if (e.target.closest('[data-action="disconnect-session"]')) {
                const button = e.target.closest('[data-action="disconnect-session"]');
                const sessionId = button.getAttribute('data-session');
                
                if (confirm('Are you sure you want to disconnect this session?')) {
                    try {
                        // Show loading state immediately
                        const originalContent = button.innerHTML;
                        button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Disconnecting...';
                        button.disabled = true;
                        button.classList.add('disabled');

                        // Find session card for visual feedback
                        const sessionCard = button.closest('.session-card') || button.closest('.col-md-6');
                        if (sessionCard) {
                            sessionCard.style.opacity = '0.6';
                            sessionCard.style.transition = 'opacity 0.3s ease';
                        }

                        // Make API call
                        await makeApiCall(`/api/whatsapp/sessions/${sessionId}`, {
                            method: 'DELETE'
                        });

                        // Show success state
                        button.innerHTML = '<i class="fas fa-check me-1"></i>Disconnected';
                        button.classList.remove('btn-outline-danger');
                        button.classList.add('btn-success');

                        // Refresh sessions data after a short delay
                        setTimeout(() => {
                            if (typeof window.loadSessionsData === 'function') {
                                window.loadSessionsData();
                            }
                            // Also refresh overview stats
                            if (typeof loadSessions === 'function') {
                                loadSessions();
                            }
                        }, 1500);

                    } catch (error) {
                        console.error('Error disconnecting session:', error);
                        
                        // Reset button state on error
                        button.innerHTML = originalContent;
                        button.disabled = false;
                        button.classList.remove('disabled');
                        
                        if (sessionCard) {
                            sessionCard.style.opacity = '1';
                        }

                        alert('Error disconnecting session: ' + error.message);
                    }
                }
            }
        });

        // Connect session functionality - use event delegation
        document.addEventListener('click', async function (e) {
            if (e.target.closest('[data-action="connect-session"]')) {
                console.log('Connect session button clicked!');
                const button = e.target.closest('[data-action="connect-session"]');
                const sessionId = button.getAttribute('data-session');
                console.log('Session ID:', sessionId);
                
                try {
                    // Show loading state immediately
                    const originalContent = button.innerHTML;
                    button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Connecting...';
                    button.disabled = true;
                    button.classList.add('disabled');

                    // Show QR code modal first
                    showQRCodeModal(sessionId);

                    // Wait a moment for modal to fully render, then start QR code generation
                    setTimeout(async () => {
                        await startQRCodeGeneration(sessionId);
                    }, 500); // Increased timeout to 500ms

                    // Reset button state
                    button.innerHTML = originalContent;
                    button.disabled = false;
                    button.classList.remove('disabled');

                } catch (error) {
                    console.error('Error connecting session:', error);
                    
                    // Reset button state on error
                    button.innerHTML = originalContent;
                    button.disabled = false;
                    button.classList.remove('disabled');

                    // Show error in QR modal
                    const container = document.getElementById('qr-code-container');
                    if (container) {
                        container.innerHTML = `
                            <div class="alert alert-danger">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Error loading QR code: ${error.message}
                            </div>
                        `;
                    }

                    alert('Error connecting session: ' + error.message);
                }
            }
        });

        // Delete session functionality - use event delegation
        document.addEventListener('click', async function (e) {
            if (e.target.closest('[data-action="delete-session"]')) {
                const button = e.target.closest('[data-action="delete-session"]');
                const sessionId = button.getAttribute('data-session');
                
                if (confirm('Are you sure you want to delete this session? This action cannot be undone.')) {
                    try {
                        // Show loading state immediately
                        const originalContent = button.innerHTML;
                        button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Deleting...';
                        button.disabled = true;
                        button.classList.add('disabled');

                        const sessionCard = button.closest('.session-card') || button.closest('.col-md-6');
                        if (sessionCard) {
                            sessionCard.style.opacity = '0.6';
                            sessionCard.style.transition = 'opacity 0.3s ease';
                        }

                        await makeApiCall(`/api/whatsapp/sessions/${sessionId}`, {
                            method: 'DELETE'
                        });

                        button.innerHTML = '<i class="fas fa-check me-1"></i>Deleted';
                        button.classList.remove('btn-outline-danger');
                        button.classList.add('btn-success');

                        // Remove the session card after a short delay
                        setTimeout(() => {
                            if (sessionCard) {
                                sessionCard.remove();
                            }
                            // Reload sessions data
                            if (typeof window.loadSessionsData === 'function') {
                                window.loadSessionsData();
                            }
                            if (typeof loadSessions === 'function') {
                                loadSessions();
                            }
                        }, 1500);

                    } catch (error) {
                        console.error('Error deleting session:', error);
                        button.innerHTML = originalContent;
                        button.disabled = false;
                        button.classList.remove('disabled');
                        
                        if (sessionCard) {
                            sessionCard.style.opacity = '1';
                        }
                        alert('Error deleting session: ' + error.message);
                    }
                }
            }
        });

        // Session button initialization will be handled by initializeSessionButtons() function

        // Quick message form
        document.getElementById('quick-message-form')?.addEventListener('submit', async function (e) {
            e.preventDefault();

            const phoneNumber = this.querySelector('input[type="tel"]').value;
            const message = this.querySelector('textarea').value;

            // Get the first active session
            try {
                const sessionsResponse = await makeApiCall('/api/whatsapp/sessions');
                const sessions = sessionsResponse.data.sessions;
                const activeSession = sessions.find(s => s.isConnected);

                if (!activeSession) {
                    alert('No active WhatsApp session found. Please connect a session first.');
                    return;
                }

                const response = await makeApiCall(`/api/whatsapp/sessions/${activeSession.sessionId}/messages`, {
                    method: 'POST',
                    body: JSON.stringify({
                        to: phoneNumber,
                        message: message
                    })
                });

                alert('Message sent successfully!');
                this.reset();
            } catch (error) {
                alert('Error sending message: ' + error.message);
            }
        });

        // Auto-refresh dashboard stats every 30 seconds (only if user is logged in and on overview)
        setInterval(async function () {
            const isLoggedIn = sessionStorage.getItem('isLoggedIn') === 'true';
            if (isLoggedIn) {
                // Only refresh data for the currently active section
                const activeSection = document.querySelector('.sidebar-nav .nav-link.active')?.getAttribute('data-section');
                if (activeSection === 'overview') {
                    await loadDashboardData();
                    // Restore API key visibility state after refresh
                    if (isApiKeyVisible) {
                        const apiKeyInput = document.getElementById('api-key');
                        const apiKeyIcon = document.getElementById('api-key-icon');
                        if (apiKeyInput && apiKeyIcon) {
                            apiKeyInput.type = 'text';
                            apiKeyIcon.className = 'fas fa-eye-slash';
                        }
                    }
                }
            }
        }, 30000);

        // Profile form submission
        document.getElementById('profile-form')?.addEventListener('submit', async function (e) {
            e.preventDefault();

            try {
                const formData = new FormData(this);
                const profileData = {
                    name: formData.get('name'),
                    email: formData.get('email'),
                    phone: formData.get('phone'),
                    company: formData.get('company'),
                    bio: formData.get('bio')
                };

                const response = await makeApiCall('/api/auth/profile', {
                    method: 'PUT',
                    body: JSON.stringify(profileData)
                });

                alert('Profile updated successfully!');
                await loadProfileData(); // Refresh the profile data
            } catch (error) {
                alert('Error updating profile: ' + error.message);
            }
        });

        // Password form submission
        document.getElementById('password-form')?.addEventListener('submit', async function (e) {
            e.preventDefault();

            const newPassword = document.getElementById('new-password').value;
            const confirmPassword = document.getElementById('confirm-password').value;

            if (newPassword !== confirmPassword) {
                alert('New passwords do not match!');
                return;
            }

            if (newPassword.length < 6) {
                alert('Password must be at least 6 characters long!');
                return;
            }

            try {
                const formData = new FormData(this);
                const passwordData = {
                    currentPassword: formData.get('currentPassword'),
                    newPassword: newPassword
                };

                const response = await makeApiCall('/api/auth/change-password', {
                    method: 'POST',
                    body: JSON.stringify(passwordData)
                });

                alert('Password changed successfully!');
                this.reset();
            } catch (error) {
                alert('Error changing password: ' + error.message);
            }
        });

        // Email verification button
        document.getElementById('verify-email-btn')?.addEventListener('click', async function () {
            try {
                const response = await makeApiCall('/api/auth/send-verification-email', {
                    method: 'POST'
                });

                // Show verification modal
                const modal = new bootstrap.Modal(document.getElementById('emailVerificationModal'));
                document.getElementById('verification-email').textContent = document.getElementById('profile-email').value;

                // Reset modal content first
                const modalBody = document.querySelector('#emailVerificationModal .modal-body');
                modalBody.innerHTML = `
                        <p>We've sent a verification email to <strong id="verification-email"></strong></p>
                        <p>Please check your inbox and click the verification link to verify your email address.</p>
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            If you don't see the email, please check your spam folder.
                        </div>
                    `;
                document.getElementById('verification-email').textContent = document.getElementById('profile-email').value;

                // If verification token is provided (development mode), show it
                if (response.verificationToken) {
                    const modalBody = document.querySelector('#emailVerificationModal .modal-body');
                    modalBody.innerHTML = `
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                <strong>Email service not configured!</strong>
                            </div>
                            <p>To enable email verification, please configure SMTP settings in your environment variables:</p>
                            <div class="alert alert-info">
                                <strong>Required Environment Variables:</strong><br>
                                <code>SMTP_HOST=smtp.gmail.com</code><br>
                                <code>SMTP_PORT=587</code><br>
                                <code>SMTP_USER=your-email@gmail.com</code><br>
                                <code>SMTP_PASS=your-app-password</code><br>
                                <code>FROM_EMAIL=your-email@gmail.com</code>
                            </div>
                            <p><strong>For now, use this verification link:</strong></p>
                            <div class="alert alert-success">
                                <a href="${response.verificationUrl}" target="_blank" class="btn btn-success">
                                    <i class="fas fa-external-link-alt me-2"></i>Verify Email Now
                                </a>
                            </div>
                        `;
                }

                modal.show();
            } catch (error) {
                alert('Error sending verification email: ' + error.message);
            }
        });

        // Resend verification email
        document.getElementById('resend-verification-btn')?.addEventListener('click', async function () {
            try {
                const response = await makeApiCall('/api/auth/send-verification-email', {
                    method: 'POST'
                });

                alert('Verification email sent!');
            } catch (error) {
                alert('Error resending verification email: ' + error.message);
            }
        });

        // Reset profile form
        document.getElementById('reset-profile-btn')?.addEventListener('click', function () {
            if (confirm('Are you sure you want to reset the form? All changes will be lost.')) {
                loadProfileData();
            }
        });

        // Refresh profile button
        document.getElementById('refresh-profile-btn')?.addEventListener('click', function () {
            loadProfileData();
        });
    });

    // Global variable to track API key visibility state
    let isApiKeyVisible = false;

    // Ensure API key buttons are present when user has an API key
    function ensureApiKeyButtons() {
        const apiKeyInput = document.getElementById('api-key');
        const inputGroup = apiKeyInput?.parentElement;
        
        if (!inputGroup) return;
        
        // Check if regenerate button already exists
        if (document.getElementById('regenerate-api-key')) {
            return; // Buttons already exist
        }
        
        // Remove generate button if it exists
        const generateBtn = document.getElementById('generate-api-key');
        if (generateBtn) {
            generateBtn.remove();
        }
        
        // Add the API key management buttons
        const buttonsHTML = `
            <button class="btn btn-outline-secondary" type="button" id="toggle-api-key">
                <i class="fas fa-eye" id="api-key-icon"></i>
            </button>
            <button class="btn btn-outline-secondary" type="button" id="copy-api-key">
                <i class="fas fa-copy"></i>
            </button>
            <button class="btn btn-warning" type="button" id="regenerate-api-key" 
                    data-bs-toggle="tooltip" 
                    data-bs-placement="top" 
                    title="Generate a new API key (this will invalidate the current key)">
                <i class="fas fa-sync-alt"></i>
            </button>
        `;
        
        // Add buttons to the input group
        inputGroup.insertAdjacentHTML('beforeend', buttonsHTML);
        
        console.log('API key buttons added dynamically');
    }

    // Initialize API key buttons function
    function initializeApiKeyButtons() {
        console.log('initializeApiKeyButtons() called');
        
        // Check if user has an API key and ensure buttons are present
        const apiKeyInput = document.getElementById('api-key');
        if (apiKeyInput && apiKeyInput.value && apiKeyInput.value !== 'Not generated') {
            // User has an API key, make sure all buttons are present
            ensureApiKeyButtons();
        }
        
        // Toggle API key visibility
        const toggleBtn = document.getElementById('toggle-api-key');
        const apiKeyIcon = document.getElementById('api-key-icon');

        if (toggleBtn && apiKeyInput && apiKeyIcon) {
            // Remove existing event listeners to prevent duplicates
            const newToggleBtn = toggleBtn.cloneNode(true);
            toggleBtn.parentNode.replaceChild(newToggleBtn, toggleBtn);

            // Restore previous state if any
            if (isApiKeyVisible) {
                    apiKeyInput.type = 'text';
                    apiKeyIcon.className = 'fas fa-eye-slash';
            }

            newToggleBtn.addEventListener('click', function () {
                // Get fresh references to the input and icon elements
                const currentApiKeyInput = document.getElementById('api-key');
                const currentApiKeyIcon = document.getElementById('api-key-icon');
                
                if (isApiKeyVisible) {
                    // Hide the API key
                    currentApiKeyInput.type = 'password';
                    currentApiKeyIcon.className = 'fas fa-eye';
                    isApiKeyVisible = false;
                } else {
                    // Show the API key
                    currentApiKeyInput.type = 'text';
                    currentApiKeyIcon.className = 'fas fa-eye-slash';
                    isApiKeyVisible = true;
                }
            });
        }

        // Copy API key functionality
        const copyBtn = document.getElementById('copy-api-key');
        if (copyBtn && apiKeyInput) {
            // Remove existing event listeners to prevent duplicates
            const newCopyBtn = copyBtn.cloneNode(true);
            copyBtn.parentNode.replaceChild(newCopyBtn, copyBtn);

            newCopyBtn.addEventListener('click', function () {
                // Get fresh reference to the input element
                const currentApiKeyInput = document.getElementById('api-key');
                const apiKey = currentApiKeyInput.value;
                if (apiKey && apiKey !== 'Not generated') {
                    navigator.clipboard.writeText(apiKey).then(function () {
                        // Show success message
                        const originalHTML = newCopyBtn.innerHTML;
                        newCopyBtn.innerHTML = '<i class="fas fa-check"></i>';
                        newCopyBtn.classList.remove('btn-outline-secondary');
                        newCopyBtn.classList.add('btn-success');

                        setTimeout(function () {
                            newCopyBtn.innerHTML = originalHTML;
                            newCopyBtn.classList.remove('btn-success');
                            newCopyBtn.classList.add('btn-outline-secondary');
                        }, 2000);
                    }).catch(function () {
                        alert('Failed to copy API key to clipboard');
                    });
                } else {
                    alert('No API key to copy');
                }
            });
        }

        // Regenerate API key functionality
        const regenerateBtn = document.getElementById('regenerate-api-key');
        console.log('Regenerate button found:', !!regenerateBtn);
        if (regenerateBtn) {
            // Remove existing event listeners to prevent duplicates
            const newRegenerateBtn = regenerateBtn.cloneNode(true);
            regenerateBtn.parentNode.replaceChild(newRegenerateBtn, regenerateBtn);

            newRegenerateBtn.addEventListener('click', async function () {
                // Show confirmation dialog
                if (!confirm('Are you sure you want to regenerate your API key? This will invalidate your current key and any applications using it will need to be updated.')) {
                    return;
                }

                try {
                    // Show loading state
                    const originalContent = this.innerHTML;
                    this.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                    this.disabled = true;
                    this.classList.add('disabled');

                    const data = await makeApiCall('/api/auth/regenerate-api-key', {
                        method: 'POST'
                    });

                    // Get reference to the API key input field
                    const currentApiKeyInput = document.getElementById('api-key');

                    // Update the input field - handle different response structures
                    const apiKey = data?.apiKey || data.apiKey || data.data?.data?.apiKey;
                    if (apiKey && currentApiKeyInput) {
                        currentApiKeyInput.value = apiKey;

                        // Update currentUser object with new API key
                        if (window.currentUser) {
                            window.currentUser.apiKey = apiKey;
                            console.log('Updated window.currentUser.apiKey:', apiKey);
                        }
                        
                        // Also update sessionStorage
                        const storedUser = sessionStorage.getItem('currentUser');
                        if (storedUser) {
                            try {
                                const userObj = JSON.parse(storedUser);
                                userObj.apiKey = apiKey;
                                sessionStorage.setItem('currentUser', JSON.stringify(userObj));
                                console.log('Updated sessionStorage currentUser with new API key');
                            } catch (e) {
                                console.error('Error updating sessionStorage user:', e);
                            }
                        }

                        // Reload sessions if loadSessions function exists
                        if (typeof loadSessions === 'function') {
                            loadSessions();
                        }
                        
                        // Also call the global refresh function if available
                        if (typeof window.refreshSessions === 'function') {
                            window.refreshSessions();
                        }
                        
                        // If we're currently on the sessions page, reload it
                        const currentSection = document.querySelector('.sidebar-nav .nav-link.active')?.getAttribute('data-section');
                        if (currentSection === 'sessions') {
                            setTimeout(() => {
                                loadSectionPage('sessions');
                            }, 500);
                        }

                        // Show success message
                        alert('API key regenerated successfully! Please update any applications using the old key.');
                    } else if (!apiKey) {
                        throw new Error('API key not found in response');
                    } else {
                        throw new Error('API key input field not found');
                    }

                    // Reset button state
                    this.innerHTML = originalContent;
                    this.disabled = false;
                    this.classList.remove('disabled');

                } catch (error) {
                    console.error('Error regenerating API key:', error);
                    
                    // Reset button state
                    this.innerHTML = originalContent;
                    this.disabled = false;
                    this.classList.remove('disabled');
                    
                    alert('Error regenerating API key: ' + error.message);
                }
            });
        }
    }

    // Initialize Session Buttons function
    function initializeSessionButtons() {
        console.log('initializeSessionButtons() called');
        
        // Create new session button
        const createSessionBtn = document.getElementById('create-session-btn');
        if (createSessionBtn) {
            // Remove existing event listeners to prevent duplicates
            const newCreateSessionBtn = createSessionBtn.cloneNode(true);
            createSessionBtn.parentNode.replaceChild(newCreateSessionBtn, createSessionBtn);

            newCreateSessionBtn.addEventListener('click', async function () {
                let originalContent = this.innerHTML;
                
                try {
                    // Check if API key exists first
                    const apiKey = getApiKey();
                    if (!apiKey) {
                        alert('Please generate an API key first!\n\n1. Go to the Overview section\n2. Click "Generate API Key"\n3. Then return here to create sessions');
                        
                        // Redirect to overview section
                        const overviewLink = document.querySelector('[data-section="overview"]');
                        if (overviewLink) {
                            overviewLink.click();
                        }
                        return;
                    }

                    // Show loading state
                    originalContent = this.innerHTML;
                    this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Creating Session...';
                    this.disabled = true;
                    this.classList.add('disabled');

                    const response = await makeApiCall('/api/whatsapp/sessions', {
                        method: 'POST',
                        body: JSON.stringify({
                            name: 'Session ' + new Date().toLocaleString(),
                            settings: {
                                autoReply: false,
                                allowGroups: true,
                                allowUnknown: true
                            }
                        })
                    });

                    // Reset button state
                    this.innerHTML = originalContent;
                    this.disabled = false;
                    this.classList.remove('disabled');

                    // Show QR code modal for the new session
                    if (response.session && response.session.sessionId) {
                        showQRCodeModal(response.session.sessionId);
                        // Wait a moment for modal to fully render, then start QR code generation
                        setTimeout(async () => {
                            await startQRCodeGeneration(response.session.sessionId);
                        }, 100);
                        // Refresh sessions data after showing QR code
                        setTimeout(() => {
                            loadSessionsData();
                            // Also refresh overview stats
                            if (typeof loadSessions === 'function') {
                                loadSessions();
                            }
                        }, 1000);
                    } else {
                        alert('Session created successfully!');
                        // Refresh sessions data instead of reloading page
                        loadSessionsData();
                        // Also refresh overview stats
                        if (typeof loadSessions === 'function') {
                            loadSessions();
                        }
                    }
                } catch (error) {
                    console.error('Error creating session:', error);
                    
                    // Reset button state on error
                    this.innerHTML = originalContent;
                    this.disabled = false;
                    this.classList.remove('disabled');
                    
                    // Show user-friendly error message
                    if (error.message.includes('Maximum sessions reached')) {
                        alert('You have reached the maximum number of sessions for your plan. Please delete an existing session or upgrade your plan.');
                    } else if (error.message.includes('API key not found')) {
                        alert('Please generate an API key first!\n\n1. Go to the Overview section\n2. Click "Generate API Key"\n3. Then return here to create sessions');
                        
                        // Redirect to overview section
                        const overviewLink = document.querySelector('[data-section="overview"]');
                        if (overviewLink) {
                            overviewLink.click();
                        }
                    } else {
                        alert('Error creating session: ' + error.message);
                    }
                }
            });
        }

        // Create first session button
        const createFirstSessionBtn = document.getElementById('create-first-session-btn');
        if (createFirstSessionBtn) {
            // Remove existing event listeners to prevent duplicates
            const newCreateFirstSessionBtn = createFirstSessionBtn.cloneNode(true);
            createFirstSessionBtn.parentNode.replaceChild(newCreateFirstSessionBtn, createFirstSessionBtn);

            newCreateFirstSessionBtn.addEventListener('click', async function () {
                let originalContent = this.innerHTML;
                
                try {
                    // Check if API key exists first
                    const apiKey = getApiKey();
                    if (!apiKey) {
                        alert('Please generate an API key first!\n\n1. Go to the Overview section\n2. Click "Generate API Key"\n3. Then return here to create sessions');
                        
                        // Redirect to overview section
                        const overviewLink = document.querySelector('[data-section="overview"]');
                        if (overviewLink) {
                            overviewLink.click();
                        }
                        return;
                    }

                    // Show loading state
                    originalContent = this.innerHTML;
                    this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Creating Session...';
                    this.disabled = true;
                    this.classList.add('disabled');

                    const response = await makeApiCall('/api/whatsapp/sessions', {
                        method: 'POST',
                        body: JSON.stringify({
                            name: 'Session ' + new Date().toLocaleString(),
                            settings: {
                                autoReply: false,
                                allowGroups: true,
                                allowUnknown: true
                            }
                        })
                    });

                    // Reset button state
                    this.innerHTML = originalContent;
                    this.disabled = false;
                    this.classList.remove('disabled');

                    // Show QR code modal for the new session
                    if (response.session && response.session.sessionId) {
                        showQRCodeModal(response.session.sessionId);
                        // Wait a moment for modal to fully render, then start QR code generation
                        setTimeout(async () => {
                            await startQRCodeGeneration(response.session.sessionId);
                        }, 100);
                        // Refresh sessions data after showing QR code
                        setTimeout(() => {
                            loadSessionsData();
                            // Also refresh overview stats
                            if (typeof loadSessions === 'function') {
                                loadSessions();
                            }
                        }, 1000);
                    } else {
                        alert('Session created successfully!');
                        // Refresh sessions data instead of reloading page
                        loadSessionsData();
                        // Also refresh overview stats
                        if (typeof loadSessions === 'function') {
                            loadSessions();
                        }
                    }
                } catch (error) {
                    console.error('Error creating session:', error);
                    
                    // Reset button state on error
                    this.innerHTML = originalContent;
                    this.disabled = false;
                    this.classList.remove('disabled');
                    
                    // Show user-friendly error message
                    if (error.message.includes('Maximum sessions reached')) {
                        alert('You have reached the maximum number of sessions for your plan. Please delete an existing session or upgrade your plan.');
                    } else if (error.message.includes('API key not found')) {
                        alert('Please generate an API key first!\n\n1. Go to the Overview section\n2. Click "Generate API Key"\n3. Then return here to create sessions');
                        
                        // Redirect to overview section
                        const overviewLink = document.querySelector('[data-section="overview"]');
                        if (overviewLink) {
                            overviewLink.click();
                        }
                    } else {
                        alert('Error creating session: ' + error.message);
                    }
                }
            });
        }

        // Debug QR button
        const debugQRBtn = document.getElementById('debug-qr-btn');
        if (debugQRBtn) {
            // Remove existing event listeners to prevent duplicates
            const newDebugQRBtn = debugQRBtn.cloneNode(true);
            debugQRBtn.parentNode.replaceChild(newDebugQRBtn, debugQRBtn);

            newDebugQRBtn.addEventListener('click', async function () {
                let originalContent = this.innerHTML;
                
                try {
                    // Show loading state
                    this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Testing...';
                    this.disabled = true;

                    const response = await makeApiCall('/api/whatsapp/debug/qr');
                    
                    // Reset button state
                    this.innerHTML = originalContent;
                    this.disabled = false;

                    if (response.success) {
                        // Show QR code in modal
                        const modalElement = document.getElementById('qrCodeModal');
                        const container = document.getElementById('qr-code-container');
                        
                        if (container && response.qrResult.success) {
                            container.innerHTML = `
                                <div class="text-center">
                                    <h5 class="text-success mb-3">
                                        <i class="fas fa-check-circle me-2"></i>QR Generation Test Successful!
                                    </h5>
                                    <div class="qr-code-wrapper mb-3">
                                        <img src="${response.qrResult.dataURL}" 
                                             alt="Test QR Code" 
                                             class="img-fluid border rounded shadow-sm"
                                             style="max-width: 280px; background: white; padding: 10px;">
                                    </div>
                                    <div class="alert alert-info">
                                        <strong>Test Results:</strong><br>
                                        <small>Text: ${response.testText}</small><br>
                                        <small>Validation: ${response.validation.valid ? 'Valid' : 'Invalid'}</small>
                                    </div>
                                    <p class="text-muted small">This confirms that QR code generation is working properly.</p>
                                </div>
                            `;
                            
                            // Show modal
                            const modal = new bootstrap.Modal(modalElement);
                            modal.show();
                        } else {
                            alert('QR generation test failed: ' + (response.qrResult.error || 'Unknown error'));
                        }
                    } else {
                        alert('Debug test failed: ' + (response.error || 'Unknown error'));
                    }
                } catch (error) {
                    // Reset button state
                    this.innerHTML = originalContent;
                    this.disabled = false;
                    
                    console.error('Debug QR test error:', error);
                    alert('Debug test error: ' + error.message);
                }
            });
        }

        // Add event listeners for dynamically created session buttons
        // Connect session buttons - Clone buttons to prevent duplicate event listeners
        document.querySelectorAll('.connect-session-btn').forEach(btn => {
            // Remove existing event listeners by cloning the button
            const newBtn = btn.cloneNode(true);
            btn.parentNode.replaceChild(newBtn, btn);
            
            newBtn.addEventListener('click', async function() {
                const sessionId = this.getAttribute('data-session-id');
                const originalContent = this.innerHTML;
                
                try {
                    this.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Connecting...';
                    this.disabled = true;
                    
                    const response = await makeApiCall(`/api/whatsapp/sessions/${sessionId}/connect`, {
                        method: 'POST'
                    });
                    
                    if (response.success) {
                        // Show QR code modal
                        showQRCodeModal(sessionId);
                        setTimeout(async () => {
                            await startQRCodeGeneration(sessionId);
                        }, 100);
                        
                        // Refresh sessions data
                        setTimeout(() => {
                            loadSessionsData();
                        }, 1000);
                    } else {
                        alert('Failed to connect session: ' + (response.error || 'Unknown error'));
                    }
                } catch (error) {
                    console.error('Error connecting session:', error);
                    alert('Error connecting session: ' + error.message);
                } finally {
                    this.innerHTML = originalContent;
                    this.disabled = false;
                }
            });
        });

        // Disconnect session buttons - Clone buttons to prevent duplicate event listeners
        document.querySelectorAll('.disconnect-session-btn').forEach(btn => {
            // Remove existing event listeners by cloning the button
            const newBtn = btn.cloneNode(true);
            btn.parentNode.replaceChild(newBtn, btn);
            
            newBtn.addEventListener('click', async function() {
                const sessionId = this.getAttribute('data-session-id');
                const originalContent = this.innerHTML;
                
                if (!confirm('Are you sure you want to disconnect this session?')) {
                    return;
                }
                
                try {
                    this.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Disconnecting...';
                    this.disabled = true;
                    
                    const response = await makeApiCall(`/api/whatsapp/sessions/${sessionId}/disconnect`, {
                        method: 'POST'
                    });
                    
                    if (response.success) {
                        alert('Session disconnected successfully!');
                        // Refresh sessions data
                        loadSessionsData();
                    } else {
                        alert('Failed to disconnect session: ' + (response.error || 'Unknown error'));
                    }
                } catch (error) {
                    console.error('Error disconnecting session:', error);
                    alert('Error disconnecting session: ' + error.message);
                } finally {
                    this.innerHTML = originalContent;
                    this.disabled = false;
                }
            });
        });

        // Delete session buttons - Clone buttons to prevent duplicate event listeners
        document.querySelectorAll('.delete-session-btn').forEach(btn => {
            // Remove existing event listeners by cloning the button
            const newBtn = btn.cloneNode(true);
            btn.parentNode.replaceChild(newBtn, btn);
            
            newBtn.addEventListener('click', async function() {
                const sessionId = this.getAttribute('data-session-id');
                const originalContent = this.innerHTML;
                
                if (!confirm('Are you sure you want to delete this session? This action cannot be undone.')) {
                    return;
                }
                
                try {
                    this.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Deleting...';
                    this.disabled = true;
                    
                    const response = await makeApiCall(`/api/whatsapp/sessions/${sessionId}`, {
                        method: 'DELETE'
                    });
                    
                    if (response.success) {
                        alert('Session deleted successfully!');
                        // Refresh sessions data
                        loadSessionsData();
                    } else {
                        alert('Failed to delete session: ' + (response.error || 'Unknown error'));
                    }
                } catch (error) {
                    console.error('Error deleting session:', error);
                    alert('Error deleting session: ' + error.message);
                } finally {
                    this.innerHTML = originalContent;
                    this.disabled = false;
                }
            });
        });
    }

    // QR Code Modal Functions - Updated for better connection detection
    let currentSessionId = null;

    function showQRCodeModal(sessionId) {
        currentSessionId = sessionId;
        
        // Clean up any existing backdrops before showing modal
        if (window.cleanupModalBackdrops) {
            window.cleanupModalBackdrops();
        }
        
        const modalElement = document.getElementById('qrCodeModal');
        console.log('Modal element found:', !!modalElement);
        
        // Reset modal title to show connecting state
        const modalTitle = document.querySelector('#qrCodeModal .modal-title');
        if (modalTitle) {
            modalTitle.innerHTML = `
                <i class="fab fa-whatsapp me-2"></i>Connect WhatsApp Session
                <span class="badge bg-warning ms-2">Connecting...</span>
            `;
            console.log('Modal title updated');
        }

        // Reset modal content to show initial loading state with progress
        const container = document.getElementById('qr-code-container');
        if (container) {
            container.innerHTML = `
                <div class="text-center">
                    <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                        <span class="visually-hidden">Connecting...</span>
                    </div>
                    <p class="text-muted">Connecting to WhatsApp...</p>
                    <p class="text-muted small">This may take up to 5 minutes</p>
                    <div class="progress mt-3" style="height: 8px;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated bg-warning" 
                             role="progressbar" 
                             style="width: 0%" 
                             id="qr-progress-bar"></div>
                    </div>
                    <p class="text-muted small mt-2" id="qr-progress-text">Initializing connection...</p>
                    <p class="text-info small" id="qr-status-text">
                        <i class="fas fa-info-circle me-1"></i>
                        Starting WhatsApp session...
                    </p>
                </div>
            `;
        } else {
            console.error('QR container not found!');
        }

        // Show modal
        const modal = new bootstrap.Modal(modalElement);
        modal.show();
        
        // Force a re-render by updating the container again after modal is shown
        setTimeout(() => {
            const container = document.getElementById('qr-code-container');
            if (container) {
                container.innerHTML = `
                    <div class="text-center">
                        <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                            <span class="visually-hidden">Connecting...</span>
                        </div>
                        <p class="text-muted">Connecting to WhatsApp...</p>
                        <p class="text-muted small">This may take up to 5 minutes</p>
                        <div class="progress mt-3" style="height: 8px;">
                            <div class="progress-bar progress-bar-striped progress-bar-animated bg-warning" 
                                 role="progressbar" 
                                 style="width: 0%" 
                                 id="qr-progress-bar"></div>
                        </div>
                        <p class="text-muted small mt-2" id="qr-progress-text">Initializing connection...</p>
                        <p class="text-info small" id="qr-status-text">
                            <i class="fas fa-info-circle me-1"></i>
                            Starting WhatsApp session...
                        </p>
                    </div>
                `;
            }
        }, 50);
        
        // Note: QR code generation will be handled by startQRCodeGeneration()
        // which will be called after this function returns
    }

    async function startQRCodeGeneration(sessionId) {
        
        // Update modal title to show generation in progress
        const modalTitle = document.querySelector('#qrCodeModal .modal-title');
        if (modalTitle) {
            modalTitle.innerHTML = `
                <i class="fab fa-whatsapp me-2"></i>Connect WhatsApp Session
                <span class="badge bg-info ms-2">Starting...</span>
            `;
        }
        
        // Update modal content to show generation in progress
        const container = document.getElementById('qr-code-container');
        if (container) {
            container.innerHTML = `
                <div class="text-center">
                    <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                        <span class="visually-hidden">Starting QR Generation...</span>
                    </div>
                    <p class="text-muted">Initializing WhatsApp session...</p>
                    <p class="text-muted small">Please wait while we prepare your QR code</p>
                    <div class="progress mt-3" style="height: 8px;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated bg-info" 
                             role="progressbar" 
                             style="width: 10%" 
                             id="qr-progress-bar"></div>
                    </div>
                    <p class="text-muted small mt-2" id="qr-status-text">
                        <i class="fas fa-cog fa-spin me-1"></i>
                        Initializing session...
                    </p>
                </div>
            `;
            
            // Poll for QR code status - faster polling for better responsiveness
            const maxAttempts = 120; // 2 minutes with 1-second intervals
            const pollInterval = 1000; // 1 second for faster updates
            let attempts = 0;

            const pollForQRCode = async () => {
                try {
                    attempts++;
                    console.log(`QR polling attempt ${attempts}/${maxAttempts} for session ${sessionId}`);

                    // Use new status endpoint for better real-time updates
                    const response = await makeApiCall(`/api/whatsapp/sessions/${sessionId}/qr/status`);

                if (response.success) {
                    const { status, qrCode, message } = response;
                    
                    // Update progress based on status
                    updateQRProgress(status, attempts, maxAttempts, message);

                    switch (status) {
                        case 'ready':
                            if (qrCode) {
                                console.log('QR code is ready, displaying...');
                                await displayQRCode(sessionId, { success: true, qrCode, status: 'ready' });
                                return; // Success, stop polling
                            }
                            break;
                            
                        case 'connected':
                            console.log('Session connected, closing modal...');
                            showSuccessMessage('WhatsApp session connected successfully!');
                            
                            // Update the modal content to show success
                            const container = document.getElementById('qr-code-container');
                            if (container) {
                                container.innerHTML = `
                                    <div class="text-center">
                                        <div class="mb-3">
                                            <i class="fas fa-check-circle text-success" style="font-size: 4rem;"></i>
                                        </div>
                                        <h4 class="text-success mb-3">Connected Successfully!</h4>
                                        <p class="text-muted">Your WhatsApp session is now active and ready to use.</p>
                                        <button type="button" class="btn btn-success" data-bs-dismiss="modal">
                                            <i class="fas fa-check me-2"></i>Continue
                                        </button>
                                    </div>
                                `;
                            }
                            
                            // Close modal after a short delay
                            setTimeout(() => {
                                const modal = bootstrap.Modal.getInstance(document.getElementById('qrCodeModal'));
                                if (modal) modal.hide();
                            }, 2000);
                            
                            // Refresh sessions data immediately and after a delay
                            if (typeof window.loadSessionsData === 'function') {
                                window.loadSessionsData();
                                // Refresh again after 3 seconds to ensure UI is updated
                                setTimeout(() => {
                                    window.loadSessionsData();
                                }, 3000);
                            }
                            return;
                            
                        case 'error':
                            throw new Error(response.error || 'QR code generation failed');
                            
                        case 'expired':
                            throw new Error('QR code has expired. Please try again.');
                            
                        case 'not_found':
                            // Session not found in manager, try to restart
                            console.log('QR session not found, restarting...');
                            const initResponse = await makeApiCall(`/api/whatsapp/sessions/${sessionId}/qr`);
                            if (!initResponse.success) {
                                throw new Error(initResponse.error || 'Failed to restart QR generation');
                            }
                            break;
                            
                        case 'initializing':
                        case 'generating':
                        default:
                            // Continue polling
                            if (attempts < maxAttempts) {
                                setTimeout(pollForQRCode, 3000); // Poll every 3 seconds
                            } else {
                                throw new Error('QR code generation timeout after 90 seconds');
                            }
                            break;
                    }
                } else {
                    throw new Error(response.error || 'Failed to get QR status');
                }
            } catch (error) {
                console.error('Error polling for QR code:', error);
                
                // Reset browser tab title
                document.title = document.title.replace(/^\[.*?\]\s*/, '');
                
                // Show error in modal
                const container = document.getElementById('qr-code-container');
                if (container) {
                    container.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <strong>Error:</strong> ${error.message}
                            <div class="mt-2">
                                <button class="btn btn-outline-primary btn-sm" onclick="startQRCodeGeneration('${sessionId}')">
                                    <i class="fas fa-redo me-1"></i>Try Again
                                </button>
                            </div>
                        </div>
                    `;
                }
                
                // Update modal title
                const modalTitle = document.querySelector('#qrCodeModal .modal-title');
                if (modalTitle) {
                    modalTitle.innerHTML = `
                        <i class="fab fa-whatsapp me-2"></i>Connect WhatsApp Session
                        <span class="badge bg-danger ms-2">Error</span>
                    `;
                }
            }
        };

        // Start polling
        pollForQRCode();
    }

    // New function to update progress based on status
    function updateQRProgress(status, attempts, maxAttempts, message) {
        const progressBar = document.getElementById('qr-progress-bar');
        const statusText = document.getElementById('qr-status-text');
        const modalTitle = document.querySelector('#qrCodeModal .modal-title');
        
        let progress = 0;
        let progressColor = 'bg-info';
        let badgeText = 'Processing';
        let badgeColor = 'bg-info';
        let icon = 'fas fa-cog fa-spin';
        
        switch (status) {
            case 'initializing':
                progress = 20;
                progressColor = 'bg-info';
                badgeText = 'Initializing';
                icon = 'fas fa-cog fa-spin';
                break;
            case 'generating':
                progress = 60;
                progressColor = 'bg-warning';
                badgeText = 'Generating';
                badgeColor = 'bg-warning';
                icon = 'fas fa-qrcode';
                break;
            case 'ready':
                progress = 100;
                progressColor = 'bg-success';
                badgeText = 'Ready';
                badgeColor = 'bg-success';
                icon = 'fas fa-check';
                break;
            case 'error':
                progress = 100;
                progressColor = 'bg-danger';
                badgeText = 'Error';
                badgeColor = 'bg-danger';
                icon = 'fas fa-exclamation-triangle';
                break;
            default:
                progress = Math.min((attempts / maxAttempts) * 80, 80);
        }
        
        if (progressBar) {
            progressBar.style.width = `${progress}%`;
            progressBar.className = `progress-bar progress-bar-striped progress-bar-animated ${progressColor}`;
        }
        
        if (statusText) {
            statusText.innerHTML = `
                <i class="${icon} me-1"></i>
                ${message || 'Processing...'}
            `;
        }
        
        if (modalTitle) {
            modalTitle.innerHTML = `
                <i class="fab fa-whatsapp me-2"></i>Connect WhatsApp Session
                <span class="badge ${badgeColor} ms-2">${badgeText}</span>
            `;
        }
        
        // Update browser tab title
        const originalTitle = document.title.replace(/^\[.*?\]\s*/, '');
        document.title = `[${badgeText}] ${originalTitle}`;
    }

    async function displayQRCode(sessionId, qrCodeData) {
        try {
            const container = document.getElementById('qr-code-container');
            if (!container) {
                console.error('QR code container not found');
                return;
            }
            
            // Reset browser tab title
            document.title = document.title.replace(/^\[.*?\]\s*/, '');
            
            // Reset modal title to success state
            const modalTitle = document.querySelector('#qrCodeModal .modal-title');
            if (modalTitle) {
                modalTitle.innerHTML = `
                    <i class="fab fa-whatsapp me-2"></i>Connect WhatsApp Session
                    <span class="badge bg-success ms-2">Ready to Scan</span>
                `;
            }
            
            // Ensure QR code has proper data URL format
            const qrCodeSrc = qrCodeData.qrCode.startsWith('data:image') 
                ? qrCodeData.qrCode 
                : `data:image/png;base64,${qrCodeData.qrCode}`;
            
            container.innerHTML = `
                <div class="text-center">
                    <div class="qr-code-wrapper mb-3">
                        <img src="${qrCodeSrc}" 
                             alt="WhatsApp QR Code" 
                             class="img-fluid border rounded shadow-sm"
                             style="max-width: 280px; background: white; padding: 10px;">
                    </div>
                    <div class="alert alert-success">
                        <i class="fas fa-mobile-alt me-2"></i>
                        <strong>Scan with WhatsApp:</strong>
                        <ol class="text-start mt-2 mb-0">
                            <li>Open WhatsApp on your phone</li>
                            <li>Tap <strong>Settings</strong> → <strong>Linked Devices</strong></li>
                            <li>Tap <strong>Link a Device</strong></li>
                            <li>Scan this QR code</li>
                        </ol>
                    </div>
                    <div class="mt-2">
                        <button class="btn btn-outline-primary btn-sm" onclick="startQRCodeGeneration('${sessionId}')">
                            <i class="fas fa-redo me-1"></i>Refresh QR Code
                        </button>
                    </div>
                </div>
            `;
            
            console.log('QR code displayed successfully');
        } catch (error) {
            console.error('Error displaying QR code:', error);
            const container = document.getElementById('qr-code-container');
            if (container) {
                container.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Error displaying QR code: ${error.message}
                    </div>
                `;
            }
        }
    }
    
    function showSuccessMessage(message) {
        // You can customize this to show toast notifications or other success indicators
        console.log('Success:', message);
        // Example: show a toast notification if you have a toast system
        if (typeof showToast === 'function') {
            showToast(message, 'success');
        } else {
            alert(message);
        }
    }

    // Refresh QR code button
    document.getElementById('refresh-qr-btn')?.addEventListener('click', function () {
        if (currentSessionId) {
            loadQRCode(currentSessionId);
        }
    });

    // Auto-refresh QR code every 2 minutes
    setInterval(() => {
        if (currentSessionId && document.getElementById('qrCodeModal').classList.contains('show')) {
            loadQRCode(currentSessionId);
        }
    }, 120000); // 2 minutes


    // Add keyboard shortcut to clean up backdrops (Ctrl+Shift+B)
    document.addEventListener('keydown', function(e) {
        if (e.ctrlKey && e.shiftKey && e.key === 'B') {
            e.preventDefault();
            if (window.cleanupModalBackdrops) {
                window.cleanupModalBackdrops();
                alert('Modal backdrops cleaned up!');
            }
        }
    });

    // Add keyboard shortcut to test modal update (Ctrl+Shift+M)
    document.addEventListener('keydown', function(e) {
        if (e.ctrlKey && e.shiftKey && e.key === 'M') {
            e.preventDefault();
            console.log('Testing modal update...');
            const container = document.getElementById('qr-code-container');
            if (container) {
                container.innerHTML = `
                    <div class="text-center">
                        <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                            <span class="visually-hidden">Testing...</span>
                        </div>
                        <p class="text-muted">Test Modal Update</p>
                        <p class="text-success">Modal content updated successfully!</p>
                    </div>
                `;
                console.log('Modal test update applied');
                alert('Modal test update applied!');
            } else {
                console.error('QR container not found for test');
                alert('QR container not found!');
            }
        }
    });

    // Initialize enhanced dashboard functionality
    initializeEnhancedDashboard();

    function initializeEnhancedDashboard() {
        // Load connected sessions for dropdowns
        loadConnectedSessions();

        // Initialize overview page functionality
        initializeOverviewFunctionality();

        // Initialize messages page functionality
        initializeMessagesFunctionality();
    }

    async function loadConnectedSessions() {
        try {
            const response = await makeApiCall('/api/whatsapp/sessions');
            if (response.success && response.sessions) {
                const connectedSessions = response.sessions.filter(session => session.status === 'connected');
                updateSessionDropdowns(connectedSessions);
            }
        } catch (error) {
            console.error('Error loading sessions:', error);
        }
    }

    function updateSessionDropdowns(sessions) {
        const dropdowns = [
            'quick-session-select',
            'bulk-session-select', 
            'bot-default-session',
            'compose-session',
            'session-filter'
        ];

        dropdowns.forEach(dropdownId => {
            const dropdown = document.getElementById(dropdownId);
            if (dropdown) {
                // Clear existing options except first
                dropdown.innerHTML = dropdown.firstElementChild.outerHTML;
                
                sessions.forEach(session => {
                    const option = document.createElement('option');
                    option.value = session.sessionId;
                    option.textContent = `${session.phoneNumber || session.sessionId} (${session.status})`;
                    dropdown.appendChild(option);
                });
            }
        });
    }

    function initializeOverviewFunctionality() {
        // Quick message form
        const quickForm = document.getElementById('quick-message-form');
        if (quickForm) {
            quickForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                await sendQuickMessage();
            });
        }

        // Bot configuration save
        const saveBotBtn = document.getElementById('save-bot-config');
        if (saveBotBtn) {
            saveBotBtn.addEventListener('click', saveBotConfiguration);
        }

        // Bulk upload form
        const bulkForm = document.getElementById('bulk-upload-form');
        if (bulkForm) {
            bulkForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                await handleBulkUpload();
            });
        }

        // Download CSV template
        const downloadTemplate = document.getElementById('download-template');
        if (downloadTemplate) {
            downloadTemplate.addEventListener('click', (e) => {
                e.preventDefault();
                downloadCSVTemplate();
            });
        }

        // Quick action buttons
        const connectNewBtn = document.getElementById('connect-new-session');
        if (connectNewBtn) {
            connectNewBtn.addEventListener('click', () => {
                // Navigate to sessions page
                const sessionsLink = document.querySelector('[data-section="sessions"]');
                if (sessionsLink) sessionsLink.click();
            });
        }

        const testWebhookBtn = document.getElementById('test-webhook');
        if (testWebhookBtn) {
            testWebhookBtn.addEventListener('click', testWebhook);
        }

        const exportContactsBtn = document.getElementById('export-contacts');
        if (exportContactsBtn) {
            exportContactsBtn.addEventListener('click', exportContacts);
        }

        const backupDataBtn = document.getElementById('backup-data');
        if (backupDataBtn) {
            backupDataBtn.addEventListener('click', backupData);
        }
    }

    function initializeMessagesFunctionality() {
        // Compose message button
        const composeBtn = document.getElementById('compose-message');
        if (composeBtn) {
            composeBtn.addEventListener('click', () => {
                loadConnectedSessions(); // Refresh sessions before opening modal
            });
        }

        // Send composed message
        const sendBtn = document.getElementById('send-composed-message');
        if (sendBtn) {
            sendBtn.addEventListener('click', sendComposedMessage);
        }

        // Character counter for compose message
        const composeText = document.getElementById('compose-text');
        if (composeText) {
            composeText.addEventListener('input', updateCharCount);
        }

        // Message filters
        const filterInputs = document.querySelectorAll('input[name="message-filter"]');
        filterInputs.forEach(input => {
            input.addEventListener('change', filterMessages);
        });

        // Session filter
        const sessionFilter = document.getElementById('session-filter');
        if (sessionFilter) {
            sessionFilter.addEventListener('change', filterMessages);
        }

        // Search messages
        const searchInput = document.getElementById('message-search');
        if (searchInput) {
            searchInput.addEventListener('input', debounce(searchMessages, 300));
        }

        // Refresh messages
        const refreshBtn = document.getElementById('refresh-messages');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', loadMessagesData);
        }

        // Export messages
        const exportBtn = document.getElementById('export-messages');
        if (exportBtn) {
            exportBtn.addEventListener('click', exportMessages);
        }
    }

    async function sendQuickMessage() {
        const sessionId = document.getElementById('quick-session-select').value;
        const phone = document.getElementById('quick-phone').value;
        const message = document.getElementById('quick-message').value;
        const mediaFile = document.getElementById('quick-media').files[0];

        if (!sessionId || !phone || !message) {
            alert('Please fill in all required fields');
            return;
        }

        try {
            let response;
            
            if (mediaFile) {
                // Send media message
                const formData = new FormData();
                formData.append('to', phone);
                formData.append('caption', message);
                formData.append('media', mediaFile);

                const headers = getApiKeyHeaders();
                delete headers['Content-Type']; // Let browser set content-type for FormData
                
                response = await fetch(`/api/whatsapp/sessions/${sessionId}/media`, {
                    method: 'POST',
                    headers: headers,
                    body: formData
                });
            } else {
                // Send text message
                response = await makeApiCall(`/api/whatsapp/sessions/${sessionId}/messages`, {
                    method: 'POST',
                    body: JSON.stringify({
                        to: phone,
                        message: message
                    })
                });
            }

            if (response.success || response.ok) {
                alert('Message sent successfully!');
                document.getElementById('quick-message-form').reset();
                loadMessagesData(); // Refresh messages if on messages page
            } else {
                throw new Error(response.error || 'Failed to send message');
            }
        } catch (error) {
            console.error('Error sending message:', error);
            alert('Error sending message: ' + error.message);
        }
    }

    async function sendComposedMessage() {
        const sessionId = document.getElementById('compose-session').value;
        const phone = document.getElementById('compose-phone').value;
        const message = document.getElementById('compose-text').value;
        const mediaFile = document.getElementById('compose-media').files[0];

        if (!sessionId || !phone || !message) {
            alert('Please fill in all required fields');
            return;
        }

        const sendBtn = document.getElementById('send-composed-message');
        const originalText = sendBtn.innerHTML;
        
        try {
            sendBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Sending...';
            sendBtn.disabled = true;

            let response;
            
            if (mediaFile) {
                // Send media message
                const formData = new FormData();
                formData.append('to', phone);
                formData.append('caption', message);
                formData.append('media', mediaFile);

                const headers = getApiKeyHeaders();
                delete headers['Content-Type']; // Let browser set content-type for FormData
                
                response = await fetch(`/api/whatsapp/sessions/${sessionId}/media`, {
                    method: 'POST',
                    headers: headers,
                    body: formData
                });
                response = await response.json();
            } else {
                // Send text message
                response = await makeApiCall(`/api/whatsapp/sessions/${sessionId}/messages`, {
                    method: 'POST',
                    body: JSON.stringify({
                        to: phone,
                        message: message
                    })
                });
            }

            if (response.success) {
                alert('Message sent successfully!');
                document.getElementById('compose-message-form').reset();
                updateCharCount(); // Reset character count
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('composeMessageModal'));
                if (modal) modal.hide();
                
                loadMessagesData(); // Refresh messages
            } else {
                throw new Error(response.error || 'Failed to send message');
            }
        } catch (error) {
            console.error('Error sending message:', error);
            alert('Error sending message: ' + error.message);
        } finally {
            sendBtn.innerHTML = originalText;
            sendBtn.disabled = false;
        }
    }

    function updateCharCount() {
        const textArea = document.getElementById('compose-text');
        const counter = document.getElementById('char-count');
        if (textArea && counter) {
            counter.textContent = textArea.value.length;
        }
    }

    function downloadCSVTemplate() {
        const csvContent = "phone,message\n+1234567890,Hello! This is a sample message.\n+0987654321,Welcome to our service!";
        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'bulk_message_template.csv';
        a.click();
        window.URL.revokeObjectURL(url);
    }

    async function handleBulkUpload() {
        const sessionId = document.getElementById('bulk-session-select').value;
        const csvFile = document.getElementById('bulk-csv').files[0];

        if (!sessionId || !csvFile) {
            alert('Please select a session and CSV file');
            return;
        }

        // TODO: Implement bulk upload functionality
        alert('Bulk upload functionality will be implemented in the next update');
    }

    function saveBotConfiguration() {
        const config = {
            name: document.getElementById('bot-name').value,
            defaultSession: document.getElementById('bot-default-session').value,
            welcomeMessage: document.getElementById('bot-welcome').value,
            fallbackMessage: document.getElementById('bot-fallback').value,
            website: document.getElementById('bot-website').value,
            enabled: document.getElementById('bot-enabled').checked
        };

        // TODO: Save to backend
        console.log('Bot configuration:', config);
        alert('Bot configuration saved! (Backend integration pending)');
    }

    async function testWebhook() {
        try {
            // TODO: Implement webhook testing
            alert('Webhook test functionality will be implemented in the next update');
        } catch (error) {
            alert('Error testing webhook: ' + error.message);
        }
    }

    function exportContacts() {
        // TODO: Implement contact export
        alert('Contact export functionality will be implemented in the next update');
    }

    function backupData() {
        // TODO: Implement data backup
        alert('Data backup functionality will be implemented in the next update');
    }

    function filterMessages() {
        // TODO: Implement message filtering
        console.log('Filtering messages...');
    }

    function searchMessages() {
        // TODO: Implement message search
        console.log('Searching messages...');
    }

    function exportMessages() {
        // TODO: Implement message export
        alert('Message export functionality will be implemented in the next update');
    }

    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // End of DOMContentLoaded event listener
};
</script>