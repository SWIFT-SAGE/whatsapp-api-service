<!-- Dashboard View -->
<div id="dashboard-view" class="view" style="display: none;">
    <div class="dashboard-container">
        <div class="container-fluid">
            <div class="row">
                <!-- Sidebar -->
                <div class="col-lg-3 col-xl-2 px-0">
                    <div class="sidebar">
                        <div class="sidebar-header">
                            <h5><i class="fas fa-tachometer-alt me-2"></i>Dashboard</h5>
                        </div>
                        <nav class="sidebar-nav">
                            <a href="#" class="nav-link active" data-section="overview">
                                <i class="fas fa-chart-line me-2"></i>Overview
                            </a>
                            <a href="#" class="nav-link" data-section="sessions">
                                <i class="fas fa-mobile-alt me-2"></i>Sessions
                            </a>
                            <a href="#" class="nav-link" data-section="messages">
                                <i class="fas fa-comments me-2"></i>Messages
                            </a>
                            <a href="#" class="nav-link" data-section="chatbot" id="chatbot-nav" style="display: none;">
                                <i class="fas fa-robot me-2"></i>Chatbot
                            </a>
                            <a href="#" class="nav-link" data-section="webhooks">
                                <i class="fas fa-webhook me-2"></i>Webhooks
                            </a>
                            <a href="#" class="nav-link" data-section="analytics">
                                <i class="fas fa-chart-bar me-2"></i>Analytics
                            </a>
                            <a href="#" class="nav-link" data-section="billing">
                                <i class="fas fa-credit-card me-2"></i>Billing
                            </a>
                            <a href="#" class="nav-link" data-section="profile">
                                <i class="fas fa-user me-2"></i>Profile
                            </a>
                            <a href="#" class="nav-link" data-view="api-docs">
                                <i class="fas fa-code me-2"></i>API Docs
                            </a>
                        </nav>
                    </div>
                </div>

                <!-- Main Content -->
                <div class="col-lg-9 col-xl-10">
                    <div class="dashboard-content">
                        <!-- Overview Section -->
                        <div id="dashboard-overview" class="dashboard-section">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h2>Dashboard Overview</h2>
                                <div class="badge bg-success fs-6" id="plan-badge">Basic Plan</div>
                            </div>

                            <!-- Stats Cards -->
                            <div class="row g-4 mb-5">
                                <div class="col-lg-3 col-md-6">
                                    <div class="stat-card">
                                        <div class="stat-icon text-primary">
                                            <i class="fas fa-paper-plane"></i>
                                        </div>
                                        <div class="stat-info">
                                            <h3 id="messages-sent" data-stat="totalMessages">
                                                <%= stats.totalMessages.toLocaleString() %>
                                            </h3>
                                            <p>Messages Sent</p>
                                            <small class="text-muted">of 10,000 this month</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-6">
                                    <div class="stat-card">
                                        <div class="stat-icon text-success">
                                            <i class="fas fa-mobile-alt"></i>
                                        </div>
                                        <div class="stat-info">
                                            <h3 id="active-sessions" data-stat="activeSessions">
                                                <%= stats.activeSessions %>
                                            </h3>
                                            <p>Active Sessions</p>
                                            <small class="text-muted">WhatsApp connected</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-6">
                                    <div class="stat-card">
                                        <div class="stat-icon text-warning">
                                            <i class="fas fa-chart-bar"></i>
                                        </div>
                                        <div class="stat-info">
                                            <h3 id="delivery-rate" data-stat="deliveryRate">
                                                <%= stats.deliveryRate %>%
                                            </h3>
                                            <p>Delivery Rate</p>
                                            <small class="text-muted">Last 30 days</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-6">
                                    <div class="stat-card">
                                        <div class="stat-icon text-info">
                                            <i class="fas fa-key"></i>
                                        </div>
                                        <div class="stat-info">
                                            <h3 id="total-sessions">
                                                <%= stats.totalSessions %>
                                            </h3>
                                            <p>Total Sessions</p>
                                            <small class="text-muted">All systems operational</small>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Usage Analytics -->
                            <div class="card mb-5">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h5 class="card-title m-0"><i class="fas fa-chart-line me-2"></i>Usage Analytics
                                        </h5>
                                        <span class="text-muted small">Last 30 days</span>
                                    </div>
                                    <canvas id="messagesChart" height="100"></canvas>
                                </div>
                            </div>

                            <!-- Quick Actions -->
                            <div class="row g-4">
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-body">
                                            <h5 class="card-title">
                                                <i class="fas fa-paper-plane me-2"></i>Quick Send Message
                                            </h5>
                                            <form id="quick-message-form">
                                                <div class="mb-3">
                                                    <label class="form-label">Phone Number</label>
                                                    <input type="tel" class="form-control" placeholder="+1234567890"
                                                        required>
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Message</label>
                                                    <textarea class="form-control" rows="3"
                                                        placeholder="Enter your message here..." required></textarea>
                                                </div>
                                                <button type="submit" class="btn btn-primary">
                                                    <i class="fas fa-send me-2"></i>Send Message
                                                </button>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-body">
                                            <h5 class="card-title">
                                                <i class="fas fa-key me-2"></i>API Key
                                            </h5>
                                            <p class="text-muted">Use this key to authenticate your API requests</p>
                                            <div class="input-group">
                                                <input type="password" class="form-control" id="api-key"
                                                    value="<%= (user && user.apiKey) ? user.apiKey : 'Not generated' %>"
                                                    readonly>
                                                <% if (user && user.apiKey) { %>
                                                    <button class="btn btn-outline-secondary" type="button"
                                                        id="toggle-api-key">
                                                        <i class="fas fa-eye" id="api-key-icon"></i>
                                                    </button>
                                                    <button class="btn btn-outline-secondary" type="button"
                                                        id="copy-api-key">
                                                        <i class="fas fa-copy"></i>
                                                    </button>
                                                    <% } else { %>
                                                        <button class="btn btn-primary" type="button"
                                                            id="generate-api-key">
                                                            <i class="fas fa-plus me-2"></i>Generate Key
                                                        </button>
                                                        <% } %>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Sessions Section -->
                        <div id="dashboard-sessions" class="dashboard-section" style="display: none;">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h2>WhatsApp Sessions</h2>
                                <button class="btn btn-primary" id="create-session-btn">
                                    <i class="fas fa-plus me-2"></i>New Session
                                </button>
                            </div>
                            <div class="row g-4" id="sessions-container">
                                <% if (sessions && sessions.length> 0) { %>
                                    <% sessions.forEach((session, index)=> { %>
                                        <div class="col-md-6">
                                            <div class="card session-card">
                                                <div class="card-body">
                                                    <div class="d-flex justify-content-between align-items-start mb-3">
                                                        <h5>Session #<%= index + 1 %>
                                                        </h5>
                                                        <span
                                                            class="badge bg-<%= session.status === 'connected' ? 'success' : session.status === 'connecting' ? 'warning' : 'secondary' %>">
                                                            <%= session.status.charAt(0).toUpperCase() +
                                                                session.status.slice(1) %>
                                                        </span>
                                                    </div>
                                                    <p><strong>Session ID:</strong>
                                                        <%= session.sessionId %>
                                                    </p>
                                                    <p><strong>Phone:</strong>
                                                        <%= session.phoneNumber || 'Not connected' %>
                                                    </p>
                                                    <p><strong>Status:</strong>
                                                        <%= session.status %>
                                                    </p>
                                                    <p><strong>Created:</strong>
                                                        <%= new Date(session.createdAt).toLocaleDateString() %>
                                                    </p>
                                                    <% if (session.status==='connected' ) { %>
                                                        <button class="btn btn-outline-danger btn-sm"
                                                            data-action="disconnect-session"
                                                            data-session="<%= session.sessionId %>">
                                                            <i class="fas fa-unlink me-1"></i>Disconnect
                                                        </button>
                                                        <% } else if (session.status==='disconnected' ) { %>
                                                            <button class="btn btn-outline-primary btn-sm"
                                                                data-action="connect-session"
                                                                data-session="<%= session.sessionId %>">
                                                                <i class="fas fa-link me-1"></i>Connect
                                                            </button>
                                                            <% } %>
                                                </div>
                                            </div>
                                        </div>
                                        <% }); %>
                                            <% } else { %>
                                                <div class="col-12">
                                                    <div class="text-center py-5">
                                                        <i class="fas fa-mobile-alt fa-3x text-muted mb-3"></i>
                                                        <h5 class="text-muted">No sessions yet</h5>
                                                        <p class="text-muted">Create your first WhatsApp session to get
                                                            started</p>
                                                        <button class="btn btn-primary" id="create-first-session-btn">
                                                            <i class="fas fa-plus me-2"></i>Create Session
                                                        </button>
                                                    </div>
                                                </div>
                                                <% } %>
                            </div>
                        </div>

                        <!-- Messages Section -->
                        <div id="dashboard-messages" class="dashboard-section" style="display: none;">
                            <div class="d-flex flex-wrap gap-2 justify-content-between align-items-center mb-4">
                                <h2 class="m-0">Recent Messages</h2>
                                <div class="d-flex flex-wrap gap-2">
                                    <div class="btn-group">
                                        <button class="btn btn-outline-secondary active">All</button>
                                        <button class="btn btn-outline-secondary">Sent</button>
                                        <button class="btn btn-outline-secondary">Failed</button>
                                    </div>
                                    <input type="search" class="form-control" placeholder="Search messages"
                                        style="max-width: 220px;">
                                    <button class="btn btn-outline-primary"><i
                                            class="fas fa-file-export me-2"></i>Export CSV</button>
                                </div>
                            </div>
                            <div class="card">
                                <div class="table-responsive">
                                    <table class="table table-hover mb-0">
                                        <thead>
                                            <tr>
                                                <th>Message ID</th>
                                                <th>To</th>
                                                <th>Message</th>
                                                <th>Status</th>
                                                <th>Time</th>
                                            </tr>
                                        </thead>
                                        <tbody id="messages-table">
                                            <tr>
                                                <td><code>msg_001</code></td>
                                                <td>+1234567890</td>
                                                <td>Hello! This is a test message.</td>
                                                <td><span class="badge bg-success">Delivered</span></td>
                                                <td>2:30 PM</td>
                                            </tr>
                                            <tr>
                                                <td><code>msg_002</code></td>
                                                <td>+0987654321</td>
                                                <td>Welcome to our service!</td>
                                                <td><span class="badge bg-warning">Sent</span></td>
                                                <td>1:15 PM</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                                <p id="messages-empty" class="text-muted p-3 mb-0" style="display: none;">No messages
                                    yet. Send your first message from the dashboard.</p>
                            </div>
                        </div>

                        <!-- Chatbot Section -->
                        <div id="dashboard-chatbot" class="dashboard-section" style="display: none;">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h2>Chatbot Management</h2>
                                <button class="btn btn-primary" id="add-chatbot-rule-btn">
                                    <i class="fas fa-plus me-2"></i>Add Rule
                                </button>
                            </div>
                            <div class="row">
                                <div class="col-md-8">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5>Chatbot Rules</h5>
                                        </div>
                                        <div class="card-body" id="chatbot-rules">
                                            <!-- Chatbot rules will be populated here -->
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5>Test Chatbot</h5>
                                        </div>
                                        <div class="card-body">
                                            <div class="mb-3">
                                                <input type="text" class="form-control" placeholder="Type a message..."
                                                    id="test-message">
                                            </div>
                                            <button class="btn btn-primary w-100" id="test-chatbot-btn">Test
                                                Response</button>
                                            <div id="chatbot-response" class="mt-3"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Webhooks Section -->
                        <div id="dashboard-webhooks" class="dashboard-section" style="display: none;">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h2>Webhook Configuration</h2>
                                <button class="btn btn-primary" id="add-webhook-btn">
                                    <i class="fas fa-plus me-2"></i>Add Webhook
                                </button>
                            </div>
                            <div class="row g-4">
                                <div class="col-md-8">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5>Active Webhooks</h5>
                                        </div>
                                        <div class="card-body">
                                            <div class="table-responsive">
                                                <table class="table table-hover">
                                                    <thead>
                                                        <tr>
                                                            <th>URL</th>
                                                            <th>Events</th>
                                                            <th>Status</th>
                                                            <th>Last Delivery</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr>
                                                            <td><code>https://api.example.com/webhook</code></td>
                                                            <td><span
                                                                    class="badge bg-primary me-1">message.sent</span><span
                                                                    class="badge bg-success">message.delivered</span>
                                                            </td>
                                                            <td><span class="badge bg-success">Active</span></td>
                                                            <td>2 minutes ago</td>
                                                            <td>
                                                                <button
                                                                    class="btn btn-sm btn-outline-primary me-1">Test</button>
                                                                <button
                                                                    class="btn btn-sm btn-outline-danger">Delete</button>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5>Webhook Events</h5>
                                        </div>
                                        <div class="card-body">
                                            <p class="text-muted small">Available webhook events:</p>
                                            <ul class="list-unstyled">
                                                <li><code>message.sent</code> - Message sent successfully</li>
                                                <li><code>message.delivered</code> - Message delivered</li>
                                                <li><code>message.failed</code> - Message delivery failed</li>
                                                <li><code>session.connected</code> - WhatsApp session connected</li>
                                                <li><code>session.disconnected</code> - WhatsApp session disconnected
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Analytics Section -->
                        <div id="dashboard-analytics" class="dashboard-section" style="display: none;">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h2>Advanced Analytics</h2>
                                <div class="btn-group">
                                    <button class="btn btn-outline-secondary active">7 Days</button>
                                    <button class="btn btn-outline-secondary">30 Days</button>
                                    <button class="btn btn-outline-secondary">90 Days</button>
                                </div>
                            </div>

                            <!-- Key Metrics -->
                            <div class="row g-4 mb-4">
                                <div class="col-lg-3 col-md-6">
                                    <div class="card text-center">
                                        <div class="card-body">
                                            <div class="display-6 text-primary mb-2">98.5%</div>
                                            <h6>Delivery Rate</h6>
                                            <small class="text-success"><i class="fas fa-arrow-up"></i> +2.3%</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-6">
                                    <div class="card text-center">
                                        <div class="card-body">
                                            <div class="display-6 text-success mb-2">1.2s</div>
                                            <h6>Avg Response Time</h6>
                                            <small class="text-success"><i class="fas fa-arrow-down"></i> -0.3s</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-6">
                                    <div class="card text-center">
                                        <div class="card-body">
                                            <div class="display-6 text-warning mb-2">15.2%</div>
                                            <h6>Error Rate</h6>
                                            <small class="text-danger"><i class="fas fa-arrow-up"></i> +1.1%</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-6">
                                    <div class="card text-center">
                                        <div class="card-body">
                                            <div class="display-6 text-info mb-2">4.8</div>
                                            <h6>Avg Session Duration (hrs)</h6>
                                            <small class="text-success"><i class="fas fa-arrow-up"></i> +0.5hrs</small>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Charts -->
                            <div class="row g-4">
                                <div class="col-lg-8">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5>Message Volume Trends</h5>
                                        </div>
                                        <div class="card-body">
                                            <canvas id="volumeChart" height="100"></canvas>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5>Message Status Distribution</h5>
                                        </div>
                                        <div class="card-body">
                                            <canvas id="statusChart" height="200"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Geographic Distribution -->
                            <div class="row g-4 mt-2">
                                <div class="col-lg-6">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5>Top Countries</h5>
                                        </div>
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span><i class="flag-icon flag-icon-us me-2"></i>United States</span>
                                                <span class="fw-bold">2,450 messages</span>
                                            </div>
                                            <div class="progress mb-3" style="height: 8px;">
                                                <div class="progress-bar" style="width: 85%"></div>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span><i class="flag-icon flag-icon-gb me-2"></i>United Kingdom</span>
                                                <span class="fw-bold">1,890 messages</span>
                                            </div>
                                            <div class="progress mb-3" style="height: 8px;">
                                                <div class="progress-bar" style="width: 65%"></div>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span><i class="flag-icon flag-icon-ca me-2"></i>Canada</span>
                                                <span class="fw-bold">1,234 messages</span>
                                            </div>
                                            <div class="progress mb-3" style="height: 8px;">
                                                <div class="progress-bar" style="width: 42%"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5>Peak Usage Hours</h5>
                                        </div>
                                        <div class="card-body">
                                            <canvas id="hourlyChart" height="200"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Billing Section -->
                        <div id="dashboard-billing" class="dashboard-section" style="display: none;">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h2>Billing & Usage</h2>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-outline-primary">Download Invoice</button>
                                    <button class="btn btn-primary" data-view="pricing">Upgrade Plan</button>
                                </div>
                            </div>

                            <!-- Current Plan -->
                            <div class="row g-4 mb-4">
                                <div class="col-lg-8">
                                    <div class="card">
                                        <div class="card-header d-flex justify-content-between align-items-center">
                                            <h5>Current Plan: Basic</h5>
                                            <span class="badge bg-success fs-6">Active</span>
                                        </div>
                                        <div class="card-body">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <h6>Plan Details</h6>
                                                    <ul class="list-unstyled">
                                                        <li><i class="fas fa-check text-success me-2"></i>10,000
                                                            messages/month</li>
                                                        <li><i class="fas fa-check text-success me-2"></i>Priority
                                                            support</li>
                                                        <li><i class="fas fa-check text-success me-2"></i>Advanced
                                                            analytics</li>
                                                        <li><i class="fas fa-check text-success me-2"></i>Webhook
                                                            support</li>
                                                    </ul>
                                                </div>
                                                <div class="col-md-6">
                                                    <h6>Billing Cycle</h6>
                                                    <p><strong>Next billing date:</strong> January 15, 2025</p>
                                                    <p><strong>Amount:</strong> $29.00</p>
                                                    <p><strong>Payment method:</strong> •••• 4242</p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5>Usage This Month</h5>
                                        </div>
                                        <div class="card-body">
                                            <div class="mb-3">
                                                <div class="d-flex justify-content-between mb-1">
                                                    <span>Messages</span>
                                                    <span>1,250 / 10,000</span>
                                                </div>
                                                <div class="progress">
                                                    <div class="progress-bar" style="width: 12.5%"></div>
                                                </div>
                                            </div>
                                            <div class="mb-3">
                                                <div class="d-flex justify-content-between mb-1">
                                                    <span>API Calls</span>
                                                    <span>3,420 / ∞</span>
                                                </div>
                                                <div class="progress">
                                                    <div class="progress-bar bg-success" style="width: 100%"></div>
                                                </div>
                                            </div>
                                            <small class="text-muted">Resets on January 15, 2025</small>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Billing History -->
                            <div class="card">
                                <div class="card-header">
                                    <h5>Billing History</h5>
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Date</th>
                                                    <th>Description</th>
                                                    <th>Amount</th>
                                                    <th>Status</th>
                                                    <th>Invoice</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr>
                                                    <td>Dec 15, 2024</td>
                                                    <td>Basic Plan - Monthly</td>
                                                    <td>$29.00</td>
                                                    <td><span class="badge bg-success">Paid</span></td>
                                                    <td><a href="#" class="btn btn-sm btn-outline-primary">Download</a>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td>Nov 15, 2024</td>
                                                    <td>Basic Plan - Monthly</td>
                                                    <td>$29.00</td>
                                                    <td><span class="badge bg-success">Paid</span></td>
                                                    <td><a href="#" class="btn btn-sm btn-outline-primary">Download</a>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td>Oct 15, 2024</td>
                                                    <td>Basic Plan - Monthly</td>
                                                    <td>$29.00</td>
                                                    <td><span class="badge bg-success">Paid</span></td>
                                                    <td><a href="#" class="btn btn-sm btn-outline-primary">Download</a>
                                                    </td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Profile Section -->
                        <div id="dashboard-profile" class="dashboard-section" style="display: none;">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h2>Profile Settings</h2>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-outline-primary" id="refresh-profile-btn">
                                        <i class="fas fa-sync me-2"></i>Refresh
                                    </button>
                                </div>
                            </div>

                            <div class="row g-4">
                                <!-- Profile Information -->
                                <div class="col-lg-8">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5><i class="fas fa-user me-2"></i>Profile Information</h5>
                                        </div>
                                        <div class="card-body">
                                            <form id="profile-form">
                                                <div class="row g-3">
                                                    <div class="col-md-6">
                                                        <label class="form-label">Full Name</label>
                                                        <input type="text" class="form-control" id="profile-name"
                                                            name="name" required>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <label class="form-label">Email Address</label>
                                                        <div class="input-group">
                                                            <input type="email" class="form-control" id="profile-email"
                                                                name="email" required>
                                                            <button class="btn btn-outline-success" type="button"
                                                                id="verify-email-btn" disabled>
                                                                <i class="fas fa-check me-1"></i>Verified
                                                            </button>
                                                        </div>
                                                        <div class="form-text" id="email-status-text">Email verification
                                                            status</div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <label class="form-label">Phone Number</label>
                                                        <input type="tel" class="form-control" id="profile-phone"
                                                            name="phone">
                                                    </div>
                                                    <div class="col-md-6">
                                                        <label class="form-label">Company</label>
                                                        <input type="text" class="form-control" id="profile-company"
                                                            name="company">
                                                    </div>
                                                    <div class="col-12">
                                                        <label class="form-label">Bio</label>
                                                        <textarea class="form-control" id="profile-bio" name="bio"
                                                            rows="3" placeholder="Tell us about yourself..."></textarea>
                                                    </div>
                                                </div>
                                                <div class="mt-4">
                                                    <button type="submit" class="btn btn-primary">
                                                        <i class="fas fa-save me-2"></i>Update Profile
                                                    </button>
                                                    <button type="button" class="btn btn-outline-secondary ms-2"
                                                        id="reset-profile-btn">
                                                        <i class="fas fa-undo me-2"></i>Reset
                                                    </button>
                                                </div>
                                            </form>
                                        </div>
                                    </div>
                                </div>

                                <!-- Security Settings -->
                                <div class="col-lg-4">
                                    <div class="card mb-4">
                                        <div class="card-header">
                                            <h5><i class="fas fa-shield-alt me-2"></i>Security</h5>
                                        </div>
                                        <div class="card-body">
                                            <form id="password-form">
                                                <div class="mb-3">
                                                    <label class="form-label">Current Password</label>
                                                    <input type="password" class="form-control" id="current-password"
                                                        name="currentPassword" required>
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">New Password</label>
                                                    <input type="password" class="form-control" id="new-password"
                                                        name="newPassword" required>
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Confirm New Password</label>
                                                    <input type="password" class="form-control" id="confirm-password"
                                                        name="confirmPassword" required>
                                                </div>
                                                <button type="submit" class="btn btn-warning w-100">
                                                    <i class="fas fa-key me-2"></i>Change Password
                                                </button>
                                            </form>
                                        </div>
                                    </div>

                                    <!-- Account Status -->
                                    <div class="card">
                                        <div class="card-header">
                                            <h5><i class="fas fa-info-circle me-2"></i>Account Status</h5>
                                        </div>
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span>Email Verified</span>
                                                <span class="badge bg-success" id="email-verified-badge">Verified</span>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span>Account Created</span>
                                                <span class="text-muted" id="account-created-date">-</span>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span>Last Login</span>
                                                <span class="text-muted" id="last-login-date">-</span>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span>Plan</span>
                                                <span class="badge bg-primary" id="profile-plan-badge">Free</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Email Verification Modal -->
                            <div class="modal fade" id="emailVerificationModal" tabindex="-1">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Email Verification</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                        </div>
                                        <div class="modal-body">
                                            <p>We've sent a verification email to <strong
                                                    id="verification-email"></strong></p>
                                            <p>Please check your inbox and click the verification link to verify your
                                                email address.</p>
                                            <div class="alert alert-info">
                                                <i class="fas fa-info-circle me-2"></i>
                                                If you don't see the email, please check your spam folder.
                                            </div>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary"
                                                data-bs-dismiss="modal">Close</button>
                                            <button type="button" class="btn btn-primary" id="resend-verification-btn">
                                                <i class="fas fa-paper-plane me-2"></i>Resend Email
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- QR Code Modal -->
                            <div class="modal fade" id="qrCodeModal" tabindex="-1">
                                <div class="modal-dialog modal-lg">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">
                                                <i class="fab fa-whatsapp me-2"></i>Connect WhatsApp Session
                                            </h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                        </div>
                                        <div class="modal-body text-center">
                                            <div id="qr-code-container">
                                                <div class="spinner-border text-primary mb-3" role="status">
                                                    <span class="visually-hidden">Loading QR Code...</span>
                                                </div>
                                                <p class="text-muted">Generating QR code...</p>
                                            </div>
                                            <div class="mt-3">
                                                <h6>How to connect:</h6>
                                                <ol class="text-start">
                                                    <li>Open WhatsApp on your phone</li>
                                                    <li>Tap <strong>Settings</strong> → <strong>Linked Devices</strong>
                                                    </li>
                                                    <li>Tap <strong>Link a Device</strong></li>
                                                    <li>Scan the QR code above</li>
                                                </ol>
                                            </div>
                                            <div class="alert alert-info mt-3">
                                                <i class="fas fa-info-circle me-2"></i>
                                                <strong>Note:</strong> The QR code will expire in 2 minutes. If it
                                                expires, click "Refresh QR Code" to generate a new one.
                                            </div>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary"
                                                data-bs-dismiss="modal">Close</button>
                                            <button type="button" class="btn btn-primary" id="refresh-qr-btn">
                                                <i class="fas fa-sync me-2"></i>Refresh QR Code
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Dashboard functionality
    document.addEventListener('DOMContentLoaded', function () {
        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        })

        // Dashboard tab navigation
        const sidebarLinks = document.querySelectorAll('.sidebar-nav .nav-link[data-section]');
        const dashboardSections = document.querySelectorAll('.dashboard-section');

        sidebarLinks.forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();

                // Remove active class from all links
                sidebarLinks.forEach(l => l.classList.remove('active'));
                // Add active class to clicked link
                this.classList.add('active');

                // Hide all sections
                dashboardSections.forEach(section => {
                    section.style.display = 'none';
                });

                // Show selected section
                const targetSection = this.getAttribute('data-section');
                console.log('Switching to section:', targetSection);
                const sectionElement = document.getElementById(`dashboard-${targetSection}`);
                if (sectionElement) {
                    sectionElement.style.display = 'block';
                    console.log('Section element found, loading data...');

                    // Load section-specific data
                    loadSectionData(targetSection);
                } else {
                    console.error('Section element not found:', `dashboard-${targetSection}`);
                }
            });
        });

        // Load initial data with a small delay to ensure authentication is ready
        setTimeout(async () => {
            await loadDashboardData();
            await loadSectionData('overview');
        }, 100);

        // Initialize API key buttons
        initializeApiKeyButtons();

        // Generate API key functionality
        const generateBtn = document.getElementById('generate-api-key');
        if (generateBtn) {
            generateBtn.addEventListener('click', async function () {
                try {
                    const data = await makeApiCall('/api/auth/regenerate-api-key', {
                        method: 'POST'
                    });

                    // Debug: Log the response to see the actual structure
                    console.log('API Key generation response:', data);

                    // Get reference to the API key input field
                    const apiKeyInputField = document.getElementById('api-key');

                    // Update the input field - handle different response structures
                    const apiKey = data?.apiKey || data.apiKey || data.data?.data?.apiKey;
                    if (apiKey && apiKeyInputField) {
                        apiKeyInputField.value = apiKey;

                        // Update currentUser object with new API key
                        if (window.currentUser) {
                            window.currentUser.apiKey = apiKey;
                            console.log('Updated currentUser.apiKey:', apiKey);
                        }
                    } else if (!apiKey) {
                        throw new Error('API key not found in response');
                    } else {
                        throw new Error('API key input field not found');
                    }

                    // Replace generate button with toggle and copy buttons
                    const inputGroup = generateBtn.parentElement;
                    generateBtn.outerHTML = `
                            <button class="btn btn-outline-secondary" type="button" id="toggle-api-key">
                                <i class="fas fa-eye" id="api-key-icon"></i>
                            </button>
                            <button class="btn btn-outline-secondary" type="button" id="copy-api-key">
                                <i class="fas fa-copy"></i>
                            </button>
                        `;

                    // Add event listeners directly to the new buttons
                    const newToggleBtn = document.getElementById('toggle-api-key');
                    const newCopyBtn = document.getElementById('copy-api-key');
                    const apiKeyInput = document.getElementById('api-key');
                    const apiKeyIcon = document.getElementById('api-key-icon');

                    if (newToggleBtn && apiKeyInput && apiKeyIcon) {
                        let isVisible = false;

                        newToggleBtn.addEventListener('click', function () {
                            console.log('Toggle button clicked!');

                            if (!isVisible) {
                                // Show the API key by replacing the input temporarily
                                const apiKeyValue = apiKeyInput.value;
                                const inputGroup = apiKeyInput.parentElement;

                                // Create a visible text input
                                const visibleInput = document.createElement('input');
                                visibleInput.type = 'text';
                                visibleInput.className = 'form-control';
                                visibleInput.id = 'api-key-visible';
                                visibleInput.value = apiKeyValue;
                                visibleInput.readOnly = true;

                                // Replace the password input with visible input
                                inputGroup.replaceChild(visibleInput, apiKeyInput);

                                // Update icon
                                apiKeyIcon.className = 'fas fa-eye-slash';
                                isVisible = true;
                                console.log('API key shown');
                            } else {
                                // Hide the API key by restoring the password input
                                const visibleInput = document.getElementById('api-key-visible');
                                const inputGroup = visibleInput.parentElement;

                                // Create password input
                                const passwordInput = document.createElement('input');
                                passwordInput.type = 'password';
                                passwordInput.className = 'form-control';
                                passwordInput.id = 'api-key';
                                passwordInput.value = visibleInput.value;
                                passwordInput.readOnly = true;

                                // Replace the visible input with password input
                                inputGroup.replaceChild(passwordInput, visibleInput);

                                // Update icon
                                apiKeyIcon.className = 'fas fa-eye';
                                isVisible = false;
                                console.log('API key hidden');
                            }
                        });
                    } else {
                        console.log('Toggle button or elements not found:', {
                            newToggleBtn: !!newToggleBtn,
                            apiKeyInput: !!apiKeyInput,
                            apiKeyIcon: !!apiKeyIcon
                        });
                    }

                    if (newCopyBtn && apiKeyInput) {
                        newCopyBtn.addEventListener('click', function () {
                            const apiKey = apiKeyInput.value;
                            if (apiKey && apiKey !== 'Not generated') {
                                navigator.clipboard.writeText(apiKey).then(function () {
                                    // Show success message
                                    const originalHTML = newCopyBtn.innerHTML;
                                    newCopyBtn.innerHTML = '<i class="fas fa-check"></i>';
                                    newCopyBtn.classList.remove('btn-outline-secondary');
                                    newCopyBtn.classList.add('btn-success');

                                    setTimeout(function () {
                                        newCopyBtn.innerHTML = originalHTML;
                                        newCopyBtn.classList.remove('btn-success');
                                        newCopyBtn.classList.add('btn-outline-secondary');
                                    }, 2000);
                                }).catch(function () {
                                    alert('Failed to copy API key to clipboard');
                                });
                            } else {
                                alert('No API key to copy');
                            }
                        });
                    }
                } catch (error) {
                    alert('Error generating API key: ' + error.message);
                }
            });
        }

        // Session management
        document.querySelectorAll('[data-action="disconnect-session"]').forEach(button => {
            button.addEventListener('click', async function () {
                const sessionId = this.getAttribute('data-session');
                if (confirm('Are you sure you want to disconnect this session?')) {
                    try {
                        await makeApiCall(`/api/whatsapp/sessions/${sessionId}`, {
                            method: 'DELETE'
                        });

                        const sessionCard = this.closest('.session-card');
                        sessionCard.style.opacity = '0.5';
                        this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Disconnecting...';
                        this.disabled = true;

                        setTimeout(() => {
                            // Refresh sessions data instead of reloading page
                            loadSessionsData();
                            // Also refresh overview stats
                            if (typeof loadSessions === 'function') {
                                loadSessions();
                            }
                        }, 2000);
                    } catch (error) {
                        alert('Error disconnecting session: ' + error.message);
                    }
                }
            });
        });

        document.querySelectorAll('[data-action="connect-session"]').forEach(button => {
            button.addEventListener('click', async function () {
                const sessionId = this.getAttribute('data-session');
                this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Connecting...';
                this.disabled = true;

                try {
                    // Show QR code modal
                    showQRCodeModal(sessionId);

                    // Reset button state
                    this.innerHTML = '<i class="fas fa-link me-1"></i>Connect';
                    this.disabled = false;
                } catch (error) {
                    this.innerHTML = '<i class="fas fa-link me-1"></i>Connect';
                    this.disabled = false;
                    alert('Error connecting session: ' + error.message);
                }
            });
        });

        // Create new session
        document.getElementById('create-session-btn')?.addEventListener('click', async function () {
            try {
                console.log('Creating session...');
                const response = await makeApiCall('/api/whatsapp/sessions', {
                    method: 'POST',
                    body: JSON.stringify({
                        name: 'Session ' + new Date().toLocaleString(),
                        settings: {
                            autoReply: false,
                            allowGroups: true,
                            allowUnknown: true
                        }
                    })
                });

                console.log('Session created successfully:', response);

                    // Show QR code modal for the new session
                    if (response.session && response.session.sessionId) {
                        showQRCodeModal(response.session.sessionId);
                        // Refresh sessions data after showing QR code
                        setTimeout(() => {
                            loadSessionsData();
                            // Also refresh overview stats
                            if (typeof loadSessions === 'function') {
                                loadSessions();
                            }
                        }, 1000);
                    } else {
                        alert('Session created successfully!');
                        // Refresh sessions data instead of reloading page
                        loadSessionsData();
                        // Also refresh overview stats
                        if (typeof loadSessions === 'function') {
                            loadSessions();
                        }
                    }
            } catch (error) {
                console.error('Error creating session:', error);
                alert('Error creating session: ' + error.message);
            }
        });

        document.getElementById('create-first-session-btn')?.addEventListener('click', async function () {
            try {
                const response = await makeApiCall('/api/whatsapp/sessions', {
                    method: 'POST',
                    body: JSON.stringify({
                        name: 'Session ' + new Date().toLocaleString(),
                        settings: {
                            autoReply: false,
                            allowGroups: true,
                            allowUnknown: true
                        }
                    })
                });

                alert('Session created successfully!');
                // Refresh sessions data instead of reloading page
                loadSessionsData();
                // Also refresh overview stats
                if (typeof loadSessions === 'function') {
                    loadSessions();
                }
            } catch (error) {
                alert('Error creating session: ' + error.message);
            }
        });

        // Quick message form
        document.getElementById('quick-message-form')?.addEventListener('submit', async function (e) {
            e.preventDefault();

            const phoneNumber = this.querySelector('input[type="tel"]').value;
            const message = this.querySelector('textarea').value;

            // Get the first active session
            try {
                const sessionsResponse = await makeApiCall('/api/whatsapp/sessions');
                const sessions = sessionsResponse.data.sessions;
                const activeSession = sessions.find(s => s.isConnected);

                if (!activeSession) {
                    alert('No active WhatsApp session found. Please connect a session first.');
                    return;
                }

                const response = await makeApiCall(`/api/whatsapp/sessions/${activeSession.sessionId}/messages`, {
                    method: 'POST',
                    body: JSON.stringify({
                        to: phoneNumber,
                        message: message
                    })
                });

                alert('Message sent successfully!');
                this.reset();
            } catch (error) {
                alert('Error sending message: ' + error.message);
            }
        });

        // Auto-refresh dashboard stats every 30 seconds (only if user is logged in)
        setInterval(async function () {
            const isLoggedIn = sessionStorage.getItem('isLoggedIn') === 'true';
            if (isLoggedIn) {
                await loadDashboardData();
            }
        }, 30000);

        // Profile form submission
        document.getElementById('profile-form')?.addEventListener('submit', async function (e) {
            e.preventDefault();

            try {
                const formData = new FormData(this);
                const profileData = {
                    name: formData.get('name'),
                    email: formData.get('email'),
                    phone: formData.get('phone'),
                    company: formData.get('company'),
                    bio: formData.get('bio')
                };

                const response = await makeApiCall('/api/auth/profile', {
                    method: 'PUT',
                    body: JSON.stringify(profileData)
                });

                alert('Profile updated successfully!');
                await loadProfileData(); // Refresh the profile data
            } catch (error) {
                alert('Error updating profile: ' + error.message);
            }
        });

        // Password form submission
        document.getElementById('password-form')?.addEventListener('submit', async function (e) {
            e.preventDefault();

            const newPassword = document.getElementById('new-password').value;
            const confirmPassword = document.getElementById('confirm-password').value;

            if (newPassword !== confirmPassword) {
                alert('New passwords do not match!');
                return;
            }

            if (newPassword.length < 6) {
                alert('Password must be at least 6 characters long!');
                return;
            }

            try {
                const formData = new FormData(this);
                const passwordData = {
                    currentPassword: formData.get('currentPassword'),
                    newPassword: newPassword
                };

                const response = await makeApiCall('/api/auth/change-password', {
                    method: 'POST',
                    body: JSON.stringify(passwordData)
                });

                alert('Password changed successfully!');
                this.reset();
            } catch (error) {
                alert('Error changing password: ' + error.message);
            }
        });

        // Email verification button
        document.getElementById('verify-email-btn')?.addEventListener('click', async function () {
            try {
                const response = await makeApiCall('/api/auth/send-verification-email', {
                    method: 'POST'
                });

                // Show verification modal
                const modal = new bootstrap.Modal(document.getElementById('emailVerificationModal'));
                document.getElementById('verification-email').textContent = document.getElementById('profile-email').value;

                // Reset modal content first
                const modalBody = document.querySelector('#emailVerificationModal .modal-body');
                modalBody.innerHTML = `
                        <p>We've sent a verification email to <strong id="verification-email"></strong></p>
                        <p>Please check your inbox and click the verification link to verify your email address.</p>
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            If you don't see the email, please check your spam folder.
                        </div>
                    `;
                document.getElementById('verification-email').textContent = document.getElementById('profile-email').value;

                // If verification token is provided (development mode), show it
                if (response.verificationToken) {
                    const modalBody = document.querySelector('#emailVerificationModal .modal-body');
                    modalBody.innerHTML = `
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                <strong>Email service not configured!</strong>
                            </div>
                            <p>To enable email verification, please configure SMTP settings in your environment variables:</p>
                            <div class="alert alert-info">
                                <strong>Required Environment Variables:</strong><br>
                                <code>SMTP_HOST=smtp.gmail.com</code><br>
                                <code>SMTP_PORT=587</code><br>
                                <code>SMTP_USER=your-email@gmail.com</code><br>
                                <code>SMTP_PASS=your-app-password</code><br>
                                <code>FROM_EMAIL=your-email@gmail.com</code>
                            </div>
                            <p><strong>For now, use this verification link:</strong></p>
                            <div class="alert alert-success">
                                <a href="${response.verificationUrl}" target="_blank" class="btn btn-success">
                                    <i class="fas fa-external-link-alt me-2"></i>Verify Email Now
                                </a>
                            </div>
                        `;
                }

                modal.show();
            } catch (error) {
                alert('Error sending verification email: ' + error.message);
            }
        });

        // Resend verification email
        document.getElementById('resend-verification-btn')?.addEventListener('click', async function () {
            try {
                const response = await makeApiCall('/api/auth/send-verification-email', {
                    method: 'POST'
                });

                alert('Verification email sent!');
            } catch (error) {
                alert('Error resending verification email: ' + error.message);
            }
        });

        // Reset profile form
        document.getElementById('reset-profile-btn')?.addEventListener('click', function () {
            if (confirm('Are you sure you want to reset the form? All changes will be lost.')) {
                loadProfileData();
            }
        });

        // Refresh profile button
        document.getElementById('refresh-profile-btn')?.addEventListener('click', function () {
            loadProfileData();
        });
    });

    // Initialize API key buttons function
    function initializeApiKeyButtons() {
        // Toggle API key visibility
        const toggleBtn = document.getElementById('toggle-api-key');
        const apiKeyInput = document.getElementById('api-key');
        const apiKeyIcon = document.getElementById('api-key-icon');

        if (toggleBtn && apiKeyInput && apiKeyIcon) {
            // Remove existing event listeners to prevent duplicates
            const newToggleBtn = toggleBtn.cloneNode(true);
            toggleBtn.parentNode.replaceChild(newToggleBtn, toggleBtn);

            newToggleBtn.addEventListener('click', function () {
                if (apiKeyInput.type === 'password') {
                    apiKeyInput.type = 'text';
                    apiKeyIcon.className = 'fas fa-eye-slash';
                } else {
                    apiKeyInput.type = 'password';
                    apiKeyIcon.className = 'fas fa-eye';
                }
            });
        }

        // Copy API key functionality
        const copyBtn = document.getElementById('copy-api-key');
        if (copyBtn && apiKeyInput) {
            // Remove existing event listeners to prevent duplicates
            const newCopyBtn = copyBtn.cloneNode(true);
            copyBtn.parentNode.replaceChild(newCopyBtn, copyBtn);

            newCopyBtn.addEventListener('click', function () {
                const apiKey = apiKeyInput.value;
                if (apiKey && apiKey !== 'Not generated') {
                    navigator.clipboard.writeText(apiKey).then(function () {
                        // Show success message
                        const originalHTML = newCopyBtn.innerHTML;
                        newCopyBtn.innerHTML = '<i class="fas fa-check"></i>';
                        newCopyBtn.classList.remove('btn-outline-secondary');
                        newCopyBtn.classList.add('btn-success');

                        setTimeout(function () {
                            newCopyBtn.innerHTML = originalHTML;
                            newCopyBtn.classList.remove('btn-success');
                            newCopyBtn.classList.add('btn-outline-secondary');
                        }, 2000);
                    }).catch(function () {
                        alert('Failed to copy API key to clipboard');
                    });
                } else {
                    alert('No API key to copy');
                }
            });
        }
    }

    // QR Code Modal Functions
    let currentSessionId = null;

    function showQRCodeModal(sessionId) {
        currentSessionId = sessionId;
        const modal = new bootstrap.Modal(document.getElementById('qrCodeModal'));

        // Reset modal content
        const container = document.getElementById('qr-code-container');
        container.innerHTML = `
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading QR Code...</span>
                </div>
                <p class="text-muted">Generating QR code...</p>
            `;

        // Show modal
        modal.show();

        // Load QR code
        loadQRCode(sessionId);
    }

    async function loadQRCode(sessionId) {
        try {
            const response = await makeApiCall(`/api/whatsapp/sessions/${sessionId}/qr`);

            if (response.success && response.qrCode) {
                const container = document.getElementById('qr-code-container');
                container.innerHTML = `
                        <div class="qr-code-wrapper">
                            <img src="data:image/png;base64,${response.qrCode}" 
                                 alt="WhatsApp QR Code" 
                                 class="img-fluid border rounded shadow-sm"
                                 style="max-width: 300px;">
                        </div>
                        <p class="text-success mt-2">
                            <i class="fas fa-check-circle me-1"></i>
                            QR Code generated successfully
                        </p>
                    `;
            } else {
                throw new Error(response.message || 'Failed to generate QR code');
            }
        } catch (error) {
            console.error('Error loading QR code:', error);
            const container = document.getElementById('qr-code-container');
            container.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Error loading QR code: ${error.message}
                    </div>
                `;
        }
    }

    // Refresh QR code button
    document.getElementById('refresh-qr-btn')?.addEventListener('click', function () {
        if (currentSessionId) {
            loadQRCode(currentSessionId);
        }
    });

    // Auto-refresh QR code every 2 minutes
    setInterval(() => {
        if (currentSessionId && document.getElementById('qrCodeModal').classList.contains('show')) {
            loadQRCode(currentSessionId);
        }
    }, 120000); // 2 minutes

    // Global API functions
    function getApiKey() {
        // First try to get API key from currentUser (most reliable)
        let apiKey = '';
        if (window.currentUser && window.currentUser.apiKey) {
            apiKey = window.currentUser.apiKey;
            console.log('Getting API key from currentUser:', apiKey);
        } else {
            // Fallback to input field
            const apiKeyInput = document.getElementById('api-key');
            apiKey = apiKeyInput ? apiKeyInput.value : '';
            console.log('Getting API key from input field:', apiKey);
        }

        if (!apiKey || apiKey === 'Not generated') {
            throw new Error('API key not found. Please generate an API key first.');
        }

        return apiKey;
    }

    function getJwtToken() {
        // Try to get JWT token from sessionStorage
        const token = sessionStorage.getItem('authToken');
        if (!token || token === 'undefined' || token === 'null') {
            throw new Error('Authentication token not found. Please log in again.');
        }
        return token;
    }

    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
        return null;
    }

    function getApiKeyHeaders() {
        const apiKey = getApiKey();
        return {
            'Content-Type': 'application/json',
            'x-api-key': apiKey
        };
    }

    function getJwtHeaders() {
        const token = getJwtToken();
        return {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
        };
    }

    async function makeApiCall(endpoint, options = {}) {
        try {
            console.log('makeApiCall called with endpoint:', endpoint);
            // Check if user is logged in first
            const isLoggedIn = sessionStorage.getItem('isLoggedIn') === 'true';
            if (!isLoggedIn) {
                throw new Error('User not logged in');
            }

            // Determine authentication method based on endpoint
            let headers;
            if (endpoint.includes('/api/whatsapp/')) {
                headers = getApiKeyHeaders();
                console.log('Using API key headers for:', endpoint, headers);
            } else if (endpoint.includes('/api/analytics/') || endpoint.includes('/api/user/') || endpoint.includes('/api/auth/')) {
                headers = getJwtHeaders();
                console.log('Using JWT headers for:', endpoint, headers);
            } else {
                // Default to JWT for other endpoints
                headers = getJwtHeaders();
                console.log('Using default JWT headers for:', endpoint, headers);
            }

            const response = await fetch(endpoint, {
                headers: {
                    ...headers,
                    ...options.headers
                },
                ...options
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));

                // Handle specific authentication errors
                if (response.status === 401) {
                    if (errorData.error === 'Access token required') {
                        throw new Error('Please log in to access this feature.');
                    } else if (errorData.error === 'API key required') {
                        throw new Error('Please generate an API key first.');
                    } else if (errorData.error === 'Invalid API key') {
                        throw new Error('Invalid API key. Please generate a new one.');
                    }
                }

                throw new Error(errorData.message || errorData.error || `HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            // Only log errors that aren't expected authentication issues
            if (!error.message.includes('not logged in') &&
                !error.message.includes('log in') &&
                !error.message.includes('API key')) {
                console.error('API call failed:', error);
            }
            throw error;
        }
    }

    // Load dashboard overview data
    async function loadDashboardData() {
        try {
            showLoading('overview');

            // Check if user is logged in
            const isLoggedIn = sessionStorage.getItem('isLoggedIn') === 'true';
            if (!isLoggedIn) {
                // Show default data for non-logged in users
                updateElement('messages-sent', '0');
                updateElement('active-sessions', '0');
                updateElement('delivery-rate', '0%');
                updateElement('total-sessions', '0');
                updateElement('plan-badge', 'Free Plan');
                hideLoading('overview');
                return;
            }

            // Check if JWT token exists
            const token = sessionStorage.getItem('authToken');
            if (!token) {
                updateElement('messages-sent', '0');
                updateElement('active-sessions', '0');
                updateElement('delivery-rate', '0%');
                updateElement('total-sessions', '0');
                updateElement('plan-badge', 'Free Plan');
                hideLoading('overview');
                return;
            }

            const response = await makeApiCall('/api/analytics/dashboard?period=30d');
            const stats = response.data.overview;

            // Update stats cards
            updateElement('messages-sent', (stats.totalMessages || 0).toLocaleString());
            updateElement('active-sessions', stats.activeSessions || 0);
            updateElement('delivery-rate', calculateDeliveryRate(stats) + '%');
            updateElement('total-sessions', stats.totalSessions || 0);

            // Update plan badge
            updateElement('plan-badge', stats.plan ? stats.plan.charAt(0).toUpperCase() + stats.plan.slice(1) + ' Plan' : 'Free Plan');

            hideLoading('overview');
        } catch (error) {
            console.error('Error loading dashboard data:', error);
            hideLoading('overview');

            // Show user-friendly error message
            if (error.message.includes('log in')) {
                showError('overview', 'Please log in to view dashboard data');
            } else {
                showError('overview', 'Failed to load dashboard data: ' + error.message);
            }
        }
    }

    // Load section-specific data
    async function loadSectionData(section) {
        console.log('loadSectionData called with section:', section);
        switch (section) {
            case 'overview':
                await loadDashboardData();
                break;
            case 'sessions':
                await loadSessionsData();
                break;
            case 'messages':
                await loadMessagesData();
                break;
            case 'webhooks':
                await loadWebhooksData();
                break;
            case 'analytics':
                await loadAnalyticsData();
                break;
            case 'billing':
                await loadBillingData();
                break;
            case 'profile':
                console.log('Loading profile data...');
                await loadProfileData();
                break;
        }
    }

    // Load sessions data
    async function loadSessionsData() {
        try {
            showLoading('sessions');

            // Check if user is logged in
            const isLoggedIn = sessionStorage.getItem('isLoggedIn') === 'true';
            if (!isLoggedIn) {
                showError('sessions', 'Please log in to view sessions');
                hideLoading('sessions');
                return;
            }

            // Check if API key exists for WhatsApp endpoints
            const apiKey = document.getElementById('api-key')?.value;
            if (!apiKey || apiKey === 'Not generated') {
                showError('sessions', 'Please generate an API key first');
                hideLoading('sessions');
                return;
            }

            const response = await makeApiCall('/api/whatsapp/sessions');
            const sessions = response.data.sessions;

            const container = document.getElementById('sessions-container');
            if (sessions.length === 0) {
                container.innerHTML = `
                        <div class="col-12">
                            <div class="text-center py-5">
                                <i class="fas fa-mobile-alt fa-3x text-muted mb-3"></i>
                                <h5 class="text-muted">No sessions yet</h5>
                                <p class="text-muted">Create your first WhatsApp session to get started</p>
                                <button class="btn btn-primary" id="create-first-session-btn">
                                    <i class="fas fa-plus me-2"></i>Create Session
                                </button>
                            </div>
                        </div>
                    `;
            } else {
                container.innerHTML = sessions.map((session, index) => `
                        <div class="col-md-6">
                            <div class="card session-card">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start mb-3">
                                        <h5>Session #${index + 1}</h5>
                                        <span class="badge bg-${session.isConnected ? 'success' : 'secondary'}">
                                            ${session.isConnected ? 'Connected' : 'Disconnected'}
                                        </span>
                                    </div>
                                    <p><strong>Session ID:</strong> ${session.sessionId}</p>
                                    <p><strong>Phone:</strong> ${session.phoneNumber || 'Not connected'}</p>
                                    <p><strong>Status:</strong> ${session.isConnected ? 'Connected' : 'Disconnected'}</p>
                                    <p><strong>Created:</strong> ${new Date(session.createdAt).toLocaleDateString()}</p>
                                    <p><strong>Messages:</strong> ${session.messageStats.total} total (${session.messageStats.sent} sent, ${session.messageStats.received} received)</p>
                                    ${session.isConnected ?
                        `<button class="btn btn-outline-danger btn-sm" data-action="disconnect-session" data-session="${session.sessionId}">
                                            <i class="fas fa-unlink me-1"></i>Disconnect
                                        </button>` :
                        `<button class="btn btn-outline-primary btn-sm" data-action="connect-session" data-session="${session.sessionId}">
                                            <i class="fas fa-link me-1"></i>Connect
                                        </button>`
                    }
                                </div>
                            </div>
                        </div>
                    `).join('');
            }

            hideLoading('sessions');
        } catch (error) {
            console.error('Error loading sessions data:', error);
            hideLoading('sessions');

            if (error.message.includes('log in')) {
                showError('sessions', 'Please log in to view sessions');
            } else if (error.message.includes('API key')) {
                showError('sessions', 'Please generate an API key first');
            } else {
                showError('sessions', 'Failed to load sessions data: ' + error.message);
            }
        }
    }

    // Load messages data
    async function loadMessagesData() {
        try {
            showLoading('messages');
            // Get messages from all sessions
            const response = await makeApiCall('/api/analytics/messages?period=7d');
            const timeSeries = response.data.timeSeries;

            // Update messages table with recent data
            const messagesTable = document.getElementById('messages-table');
            if (timeSeries && timeSeries.length > 0) {
                // This would be populated with actual message data
                // For now, we'll show the time series data
                messagesTable.innerHTML = timeSeries.slice(0, 10).map((item, index) => `
                        <tr>
                            <td><code>msg_${index + 1}</code></td>
                            <td>+1234567890</td>
                            <td>Sample message from ${item._id}</td>
                            <td><span class="badge bg-success">Delivered</span></td>
                            <td>${new Date().toLocaleTimeString()}</td>
                        </tr>
                    `).join('');
            } else {
                messagesTable.innerHTML = `
                        <tr>
                            <td colspan="5" class="text-center text-muted">No messages found</td>
                        </tr>
                    `;
            }

            hideLoading('messages');
        } catch (error) {
            console.error('Error loading messages data:', error);
            hideLoading('messages');
            showError('messages', 'Failed to load messages data');
        }
    }

    // Load webhooks data
    async function loadWebhooksData() {
        try {
            showLoading('webhooks');
            // Webhook data would come from a webhook management API
            // For now, we'll show placeholder data
            hideLoading('webhooks');
        } catch (error) {
            console.error('Error loading webhooks data:', error);
            hideLoading('webhooks');
            showError('webhooks', 'Failed to load webhooks data');
        }
    }

    // Load analytics data
    async function loadAnalyticsData() {
        try {
            showLoading('analytics');
            const response = await makeApiCall('/api/analytics/dashboard?period=30d');
            const stats = response.data;

            // Update analytics metrics
            updateElement('delivery-rate-analytics', calculateDeliveryRate(stats.overview) + '%');
            updateElement('total-messages-analytics', (stats.overview.totalMessages || 0).toLocaleString());
            updateElement('active-sessions-analytics', stats.overview.activeSessions || 0);

            // Update message status distribution
            if (stats.messageStatus) {
                const statusData = stats.messageStatus;
                const total = Object.values(statusData).reduce((sum, count) => sum + count, 0);

                // Update status chart data (this would integrate with Chart.js)
                console.log('Message status data:', statusData);
            }

            hideLoading('analytics');
        } catch (error) {
            console.error('Error loading analytics data:', error);
            hideLoading('analytics');
            showError('analytics', 'Failed to load analytics data');
        }
    }

    // Load billing data
    async function loadBillingData() {
        try {
            showLoading('billing');
            const response = await makeApiCall('/api/auth/profile');
            const user = response.user;

            // Update billing information
            if (user && user.subscription) {
                updateElement('plan-name', user.subscription.plan || 'Free');
                updateElement('plan-status', user.subscription.status || 'active');
                updateElement('next-billing', user.subscription.nextBillingDate || 'N/A');
            }

            hideLoading('billing');
        } catch (error) {
            console.error('Error loading billing data:', error);
            hideLoading('billing');
            showError('billing', 'Failed to load billing data');
        }
    }

    // Load profile data
    async function loadProfileData() {
        try {
            console.log('loadProfileData called');
            showLoading('profile');
            const response = await makeApiCall('/api/auth/profile');
            console.log('Profile API response:', response);
            const user = response.user;

            if (user) {
                console.log('Profile data loaded:', user); // Debug log

                // Update profile form fields
                updateElement('profile-name', user.name || '');
                updateElement('profile-email', user.email || '');
                updateElement('profile-phone', user.profile?.phone || '');
                updateElement('profile-company', user.profile?.company || '');
                updateElement('profile-bio', user.profile?.bio || '');

                // Debug: Check if form fields exist
                console.log('Form fields check:');
                console.log('profile-name:', document.getElementById('profile-name'));
                console.log('profile-email:', document.getElementById('profile-email'));
                console.log('profile-phone:', document.getElementById('profile-phone'));
                console.log('profile-company:', document.getElementById('profile-company'));
                console.log('profile-bio:', document.getElementById('profile-bio'));

                // Update account status
                const emailVerifiedBadge = document.getElementById('email-verified-badge');
                if (emailVerifiedBadge) {
                    emailVerifiedBadge.textContent = user.isEmailVerified ? 'Verified' : 'Unverified';
                    emailVerifiedBadge.className = user.isEmailVerified ? 'badge bg-success' : 'badge bg-warning';
                }

                updateElement('account-created-date', user.createdAt ? new Date(user.createdAt).toLocaleDateString() : '-');
                updateElement('last-login-date', user.lastLoginAt ? new Date(user.lastLoginAt).toLocaleDateString() : '-');

                const planBadge = document.getElementById('profile-plan-badge');
                if (planBadge) {
                    const plan = user.subscription?.plan || 'free';
                    planBadge.textContent = plan.charAt(0).toUpperCase() + plan.slice(1);
                    planBadge.className = `badge ${plan === 'free' ? 'bg-secondary' : plan === 'basic' ? 'bg-primary' : 'bg-success'}`;
                }

                // Update email verification status
                const verifyBtn = document.getElementById('verify-email-btn');
                const emailStatusText = document.getElementById('email-status-text');

                if (user.isEmailVerified) {
                    if (verifyBtn) {
                        verifyBtn.innerHTML = '<i class="fas fa-check me-1"></i>Verified';
                        verifyBtn.className = 'btn btn-outline-success';
                        verifyBtn.disabled = true;
                    }
                    if (emailStatusText) {
                        emailStatusText.textContent = 'Your email is verified';
                        emailStatusText.className = 'form-text text-success';
                    }
                } else {
                    if (verifyBtn) {
                        verifyBtn.innerHTML = '<i class="fas fa-envelope me-1"></i>Verify';
                        verifyBtn.className = 'btn btn-outline-warning';
                        verifyBtn.disabled = false;
                    }
                    if (emailStatusText) {
                        emailStatusText.textContent = 'Please verify your email address';
                        emailStatusText.className = 'form-text text-warning';
                    }
                }
            }

            hideLoading('profile');
        } catch (error) {
            console.error('Error loading profile data:', error);
            hideLoading('profile');
            showError('profile', 'Failed to load profile data');
        }
    }

    // Utility functions
    function calculateDeliveryRate(stats) {
        if (!stats.sentMessages || stats.sentMessages === 0) return '0.0';
        const delivered = stats.messageStatus?.delivered || 0;
        return ((delivered / stats.sentMessages) * 100).toFixed(1);
    }

    function updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
                element.value = value;
            } else {
                element.textContent = value;
            }
            console.log(`Updated ${id}:`, value); // Debug log
        } else {
            console.warn(`Element with id '${id}' not found`); // Debug log
        }
    }

    function showLoading(section) {
        const sectionElement = document.getElementById(`dashboard-${section}`);
        if (sectionElement) {
            sectionElement.classList.add('loading');
        }
    }

    function hideLoading(section) {
        const sectionElement = document.getElementById(`dashboard-${section}`);
        if (sectionElement) {
            sectionElement.classList.remove('loading');
        }
    }

    function showError(section, message) {
        const sectionElement = document.getElementById(`dashboard-${section}`);
        if (sectionElement) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'alert alert-danger';
            errorDiv.textContent = message;
            sectionElement.appendChild(errorDiv);
        }
    }
</script>