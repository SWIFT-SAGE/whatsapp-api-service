<!-- Dashboard View -->
<div id="dashboard-view" class="view" style="display: none;">
    <style>
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.95);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            border-radius: 8px;
            backdrop-filter: blur(2px);
        }
        
        .loading-content {
            text-align: center;
            padding: 2rem;
        }
        
        .loading-content .spinner-border {
            width: 3rem;
            height: 3rem;
        }
        
        .dashboard-section {
            position: relative;
            min-height: 200px;
        }
    </style>
    <div class="dashboard-container">
        <div class="container-fluid">
            <div class="row">
                <!-- Sidebar -->
                <div class="col-lg-3 col-xl-2 px-0">
                    <div class="sidebar">
                        <div class="sidebar-header">
                            <h5><i class="fas fa-tachometer-alt me-2"></i>Dashboard</h5>
                        </div>
                        <nav class="sidebar-nav">
                            <a href="#" class="nav-link active" data-section="overview">
                                <i class="fas fa-chart-line me-2"></i>Overview
                            </a>
                            <a href="#" class="nav-link" data-section="sessions">
                                <i class="fas fa-mobile-alt me-2"></i>Sessions
                            </a>
                            <a href="#" class="nav-link" data-section="messages">
                                <i class="fas fa-comments me-2"></i>Messages
                            </a>
                            <a href="#" class="nav-link" data-section="chatbot" id="chatbot-nav" style="display: none;">
                                <i class="fas fa-robot me-2"></i>Chatbot
                            </a>
                            <a href="#" class="nav-link" data-section="webhooks">
                                <i class="fas fa-webhook me-2"></i>Webhooks
                            </a>
                            <a href="#" class="nav-link" data-section="analytics">
                                <i class="fas fa-chart-bar me-2"></i>Analytics
                            </a>
                            <a href="#" class="nav-link" data-section="billing">
                                <i class="fas fa-credit-card me-2"></i>Billing
                            </a>
                            <a href="#" class="nav-link" data-section="profile">
                                <i class="fas fa-user me-2"></i>Profile
                            </a>
                            <a href="#" class="nav-link" data-view="api-docs">
                                <i class="fas fa-code me-2"></i>API Docs
                            </a>
                        </nav>
                    </div>
                </div>

                <!-- Main Content -->
                <div class="col-lg-9 col-xl-10">
                    <div class="dashboard-content">
                        <!-- Dynamic Content Container -->
                        <div id="dashboard-content-container">
                            <!-- Content will be loaded dynamically here -->
                        </div>



                    </div>
                </div>

                <!-- Modal cleanup script -->
                <script>
                    // Clean up modal backdrop when QR code modal is closed
                    document.addEventListener('DOMContentLoaded', function() {
                        const qrModal = document.getElementById('qrCodeModal');
                        if (qrModal) {
                            qrModal.addEventListener('hidden.bs.modal', function() {
                                // Remove any lingering backdrop
                                const backdrops = document.querySelectorAll('.modal-backdrop');
                                backdrops.forEach(backdrop => backdrop.remove());
                                
                                // Remove modal-open class from body
                                document.body.classList.remove('modal-open');
                                
                                // Reset body style
                                document.body.style.overflow = '';
                                document.body.style.paddingRight = '';
                                
                                console.log('QR modal closed, backdrop cleaned up');
                            });
                        }
                    });
                </script>

                <!-- Session button group styling -->
                <style>
                    .btn-group .btn {
                        margin-right: 2px;
                    }
                    .btn-group .btn:last-child {
                        margin-right: 0;
                    }
                    .btn-group .btn-sm {
                        font-size: 0.75rem;
                        padding: 0.25rem 0.5rem;
                    }
                    .session-card .btn-group {
                        margin-top: 0.5rem;
                    }
                </style>
            </div>
        </div>
    </div>
</div>

<script>
    // Dashboard functionality
    document.addEventListener('DOMContentLoaded', function () {
        // Clean up any existing modal backdrops first
        cleanupModalBackdrops();
        
        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        })

        // Dashboard tab navigation
        const sidebarLinks = document.querySelectorAll('.sidebar-nav .nav-link[data-section]');
        const contentContainer = document.getElementById('dashboard-content-container');

        sidebarLinks.forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();

                // Remove active class from all links
                sidebarLinks.forEach(l => l.classList.remove('active'));
                // Add active class to clicked link
                this.classList.add('active');

                // Get target section
                const targetSection = this.getAttribute('data-section');
                console.log('Switching to section:', targetSection);
                
                // Load the section page dynamically
                loadSectionPage(targetSection);
            });
        });

        // Load initial data with a small delay to ensure authentication is ready
        setTimeout(async () => {
            await loadDashboardData();
            await loadSectionPage('overview');

            // Initialize API key buttons after data is loaded
        initializeApiKeyButtons();
        }, 100);

        // Generate API key functionality
        const generateBtn = document.getElementById('generate-api-key');
        if (generateBtn) {
            generateBtn.addEventListener('click', async function () {
                try {
                    const data = await makeApiCall('/api/auth/regenerate-api-key', {
                        method: 'POST'
                    });


                    // Get reference to the API key input field
                    const apiKeyInputField = document.getElementById('api-key');

                    // Update the input field - handle different response structures
                    const apiKey = data?.apiKey || data.apiKey || data.data?.data?.apiKey;
                    if (apiKey && apiKeyInputField) {
                        apiKeyInputField.value = apiKey;

                        // Update currentUser object with new API key
                        if (window.currentUser) {
                            window.currentUser.apiKey = apiKey;
                        }
                    } else if (!apiKey) {
                        throw new Error('API key not found in response');
                    } else {
                        throw new Error('API key input field not found');
                    }

                    // Replace generate button with toggle and copy buttons
                    const inputGroup = generateBtn.parentElement;
                    generateBtn.outerHTML = `
                            <button class="btn btn-outline-secondary" type="button" id="toggle-api-key">
                                <i class="fas fa-eye" id="api-key-icon"></i>
                            </button>
                            <button class="btn btn-outline-secondary" type="button" id="copy-api-key">
                                <i class="fas fa-copy"></i>
                            </button>
                        `;

                    // Re-initialize API key buttons after generating new key
                    setTimeout(() => {
                        initializeApiKeyButtons();
                    }, 100);

                } catch (error) {
                    alert('Error generating API key: ' + error.message);
                }
            });
        }

        // Session management - use event delegation for dynamic content
        document.addEventListener('click', async function (e) {
            if (e.target.closest('[data-action="disconnect-session"]')) {
                const button = e.target.closest('[data-action="disconnect-session"]');
                const sessionId = button.getAttribute('data-session');
                
                if (confirm('Are you sure you want to disconnect this session?')) {
                    try {
                        // Show loading state immediately
                        const originalContent = button.innerHTML;
                        button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Disconnecting...';
                        button.disabled = true;
                        button.classList.add('disabled');

                        // Find session card for visual feedback
                        const sessionCard = button.closest('.session-card') || button.closest('.col-md-6');
                        if (sessionCard) {
                            sessionCard.style.opacity = '0.6';
                            sessionCard.style.transition = 'opacity 0.3s ease';
                        }

                        // Make API call
                        await makeApiCall(`/api/whatsapp/sessions/${sessionId}`, {
                            method: 'DELETE'
                        });

                        // Show success state
                        button.innerHTML = '<i class="fas fa-check me-1"></i>Disconnected';
                        button.classList.remove('btn-outline-danger');
                        button.classList.add('btn-success');

                        // Refresh sessions data after a short delay
                        setTimeout(() => {
                            loadSessionsData();
                            // Also refresh overview stats
                            if (typeof loadSessions === 'function') {
                                loadSessions();
                            }
                        }, 1500);

                    } catch (error) {
                        console.error('Error disconnecting session:', error);
                        
                        // Reset button state on error
                        button.innerHTML = originalContent;
                        button.disabled = false;
                        button.classList.remove('disabled');
                        
                        if (sessionCard) {
                            sessionCard.style.opacity = '1';
                        }

                        alert('Error disconnecting session: ' + error.message);
                    }
                }
            }
        });

        // Connect session functionality - use event delegation
        document.addEventListener('click', async function (e) {
            if (e.target.closest('[data-action="connect-session"]')) {
                console.log('Connect session button clicked!');
                const button = e.target.closest('[data-action="connect-session"]');
                const sessionId = button.getAttribute('data-session');
                console.log('Session ID:', sessionId);
                
                try {
                    // Show loading state immediately
                    const originalContent = button.innerHTML;
                    button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Connecting...';
                    button.disabled = true;
                    button.classList.add('disabled');

                    // Show QR code modal first
                    console.log('Calling showQRCodeModal...');
                    showQRCodeModal(sessionId);

                    // Wait a moment for modal to fully render, then start QR code generation
                    console.log('Starting QR code generation...');
                    setTimeout(async () => {
                        console.log('Starting QR code generation after timeout...');
                        await startQRCodeGeneration(sessionId);
                    }, 500); // Increased timeout to 500ms

                    // Reset button state
                    button.innerHTML = originalContent;
                    button.disabled = false;
                    button.classList.remove('disabled');

                } catch (error) {
                    console.error('Error connecting session:', error);
                    
                    // Reset button state on error
                    button.innerHTML = originalContent;
                    button.disabled = false;
                    button.classList.remove('disabled');

                    // Show error in QR modal
                    const container = document.getElementById('qr-code-container');
                    if (container) {
                        container.innerHTML = `
                            <div class="alert alert-danger">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Error loading QR code: ${error.message}
                            </div>
                        `;
                    }

                    alert('Error connecting session: ' + error.message);
                }
            }
        });

        // Delete session functionality - use event delegation
        document.addEventListener('click', async function (e) {
            if (e.target.closest('[data-action="delete-session"]')) {
                const button = e.target.closest('[data-action="delete-session"]');
                const sessionId = button.getAttribute('data-session');
                
                if (confirm('Are you sure you want to delete this session? This action cannot be undone.')) {
                    try {
                        // Show loading state immediately
                        const originalContent = button.innerHTML;
                        button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Deleting...';
                        button.disabled = true;
                        button.classList.add('disabled');

                        const sessionCard = button.closest('.session-card') || button.closest('.col-md-6');
                        if (sessionCard) {
                            sessionCard.style.opacity = '0.6';
                            sessionCard.style.transition = 'opacity 0.3s ease';
                        }

                        await makeApiCall(`/api/whatsapp/sessions/${sessionId}`, {
                            method: 'DELETE'
                        });

                        button.innerHTML = '<i class="fas fa-check me-1"></i>Deleted';
                        button.classList.remove('btn-outline-danger');
                        button.classList.add('btn-success');

                        // Remove the session card after a short delay
                        setTimeout(() => {
                            if (sessionCard) {
                                sessionCard.remove();
                            }
                            // Reload sessions data
                            loadSessionsData();
                            if (typeof loadSessions === 'function') {
                                loadSessions();
                            }
                        }, 1500);

                    } catch (error) {
                        console.error('Error deleting session:', error);
                        button.innerHTML = originalContent;
                        button.disabled = false;
                        button.classList.remove('disabled');
                        
                        if (sessionCard) {
                            sessionCard.style.opacity = '1';
                        }
                        alert('Error deleting session: ' + error.message);
                    }
                }
            }
        });

        // Create new session
        document.getElementById('create-session-btn')?.addEventListener('click', async function () {
            let originalContent = this.innerHTML; // Declare at function scope
            
            try {
                // Show loading state
                originalContent = this.innerHTML;
                this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Creating Session...';
                this.disabled = true;
                this.classList.add('disabled');

                const response = await makeApiCall('/api/whatsapp/sessions', {
                    method: 'POST',
                    body: JSON.stringify({
                        name: 'Session ' + new Date().toLocaleString(),
                        settings: {
                            autoReply: false,
                            allowGroups: true,
                            allowUnknown: true
                        }
                    })
                });

                // Reset button state
                this.innerHTML = originalContent;
                this.disabled = false;
                this.classList.remove('disabled');

                // Show QR code modal for the new session
                if (response.session && response.session.sessionId) {
                    showQRCodeModal(response.session.sessionId);
                    // Wait a moment for modal to fully render, then start QR code generation
                    setTimeout(async () => {
                        await startQRCodeGeneration(response.session.sessionId);
                    }, 100);
                        // Refresh sessions data after showing QR code
                        setTimeout(() => {
                            loadSessionsData();
                            // Also refresh overview stats
                            if (typeof loadSessions === 'function') {
                                loadSessions();
                            }
                        }, 1000);
                    } else {
                        alert('Session created successfully!');
                        // Refresh sessions data instead of reloading page
                        loadSessionsData();
                        // Also refresh overview stats
                        if (typeof loadSessions === 'function') {
                            loadSessions();
                        }
                    }
            } catch (error) {
                console.error('Error creating session:', error);
                
                // Reset button state on error
                this.innerHTML = originalContent;
                this.disabled = false;
                this.classList.remove('disabled');
                
                // Show user-friendly error message
                if (error.message.includes('Maximum sessions reached')) {
                    alert('You have reached the maximum number of sessions for your plan. Please delete an existing session or upgrade your plan.');
                } else {
                    alert('Error creating session: ' + error.message);
                }
            }
        });

        document.getElementById('create-first-session-btn')?.addEventListener('click', async function () {
            let originalContent = this.innerHTML; // Declare at function scope
            
            try {
                // Show loading state
                originalContent = this.innerHTML;
                this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Creating Session...';
                this.disabled = true;
                this.classList.add('disabled');

                const response = await makeApiCall('/api/whatsapp/sessions', {
                    method: 'POST',
                    body: JSON.stringify({
                        name: 'Session ' + new Date().toLocaleString(),
                        settings: {
                            autoReply: false,
                            allowGroups: true,
                            allowUnknown: true
                        }
                    })
                });

                // Reset button state
                this.innerHTML = originalContent;
                this.disabled = false;
                this.classList.remove('disabled');

                // Show QR code modal for the new session
                if (response.session && response.session.sessionId) {
                    showQRCodeModal(response.session.sessionId);
                    // Wait a moment for modal to fully render, then start QR code generation
                    setTimeout(async () => {
                        await startQRCodeGeneration(response.session.sessionId);
                    }, 100);
                    // Refresh sessions data after showing QR code
                    setTimeout(() => {
                        loadSessionsData();
                        // Also refresh overview stats
                        if (typeof loadSessions === 'function') {
                            loadSessions();
                        }
                    }, 1000);
                } else {
                    alert('Session created successfully!');
                    // Refresh sessions data instead of reloading page
                    loadSessionsData();
                    // Also refresh overview stats
                    if (typeof loadSessions === 'function') {
                        loadSessions();
                    }
                }
            } catch (error) {
                console.error('Error creating session:', error);
                
                // Reset button state on error
                this.innerHTML = originalContent;
                this.disabled = false;
                this.classList.remove('disabled');
                
                // Show user-friendly error message
                if (error.message.includes('Maximum sessions reached')) {
                    alert('You have reached the maximum number of sessions for your plan. Please delete an existing session or upgrade your plan.');
                } else {
                    alert('Error creating session: ' + error.message);
                }
            }
        });

        // Quick message form
        document.getElementById('quick-message-form')?.addEventListener('submit', async function (e) {
            e.preventDefault();

            const phoneNumber = this.querySelector('input[type="tel"]').value;
            const message = this.querySelector('textarea').value;

            // Get the first active session
            try {
                const sessionsResponse = await makeApiCall('/api/whatsapp/sessions');
                const sessions = sessionsResponse.data.sessions;
                const activeSession = sessions.find(s => s.isConnected);

                if (!activeSession) {
                    alert('No active WhatsApp session found. Please connect a session first.');
                    return;
                }

                const response = await makeApiCall(`/api/whatsapp/sessions/${activeSession.sessionId}/messages`, {
                    method: 'POST',
                    body: JSON.stringify({
                        to: phoneNumber,
                        message: message
                    })
                });

                alert('Message sent successfully!');
                this.reset();
            } catch (error) {
                alert('Error sending message: ' + error.message);
            }
        });

        // Auto-refresh dashboard stats every 30 seconds (only if user is logged in)
        setInterval(async function () {
            const isLoggedIn = sessionStorage.getItem('isLoggedIn') === 'true';
            if (isLoggedIn) {
                await loadDashboardData();
                // Restore API key visibility state after refresh
                if (isApiKeyVisible) {
                    const apiKeyInput = document.getElementById('api-key');
                    const apiKeyIcon = document.getElementById('api-key-icon');
                    if (apiKeyInput && apiKeyIcon) {
                        apiKeyInput.type = 'text';
                        apiKeyIcon.className = 'fas fa-eye-slash';
                    }
                }
            }
        }, 30000);

        // Profile form submission
        document.getElementById('profile-form')?.addEventListener('submit', async function (e) {
            e.preventDefault();

            try {
                const formData = new FormData(this);
                const profileData = {
                    name: formData.get('name'),
                    email: formData.get('email'),
                    phone: formData.get('phone'),
                    company: formData.get('company'),
                    bio: formData.get('bio')
                };

                const response = await makeApiCall('/api/auth/profile', {
                    method: 'PUT',
                    body: JSON.stringify(profileData)
                });

                alert('Profile updated successfully!');
                await loadProfileData(); // Refresh the profile data
            } catch (error) {
                alert('Error updating profile: ' + error.message);
            }
        });

        // Password form submission
        document.getElementById('password-form')?.addEventListener('submit', async function (e) {
            e.preventDefault();

            const newPassword = document.getElementById('new-password').value;
            const confirmPassword = document.getElementById('confirm-password').value;

            if (newPassword !== confirmPassword) {
                alert('New passwords do not match!');
                return;
            }

            if (newPassword.length < 6) {
                alert('Password must be at least 6 characters long!');
                return;
            }

            try {
                const formData = new FormData(this);
                const passwordData = {
                    currentPassword: formData.get('currentPassword'),
                    newPassword: newPassword
                };

                const response = await makeApiCall('/api/auth/change-password', {
                    method: 'POST',
                    body: JSON.stringify(passwordData)
                });

                alert('Password changed successfully!');
                this.reset();
            } catch (error) {
                alert('Error changing password: ' + error.message);
            }
        });

        // Email verification button
        document.getElementById('verify-email-btn')?.addEventListener('click', async function () {
            try {
                const response = await makeApiCall('/api/auth/send-verification-email', {
                    method: 'POST'
                });

                // Show verification modal
                const modal = new bootstrap.Modal(document.getElementById('emailVerificationModal'));
                document.getElementById('verification-email').textContent = document.getElementById('profile-email').value;

                // Reset modal content first
                const modalBody = document.querySelector('#emailVerificationModal .modal-body');
                modalBody.innerHTML = `
                        <p>We've sent a verification email to <strong id="verification-email"></strong></p>
                        <p>Please check your inbox and click the verification link to verify your email address.</p>
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            If you don't see the email, please check your spam folder.
                        </div>
                    `;
                document.getElementById('verification-email').textContent = document.getElementById('profile-email').value;

                // If verification token is provided (development mode), show it
                if (response.verificationToken) {
                    const modalBody = document.querySelector('#emailVerificationModal .modal-body');
                    modalBody.innerHTML = `
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                <strong>Email service not configured!</strong>
                            </div>
                            <p>To enable email verification, please configure SMTP settings in your environment variables:</p>
                            <div class="alert alert-info">
                                <strong>Required Environment Variables:</strong><br>
                                <code>SMTP_HOST=smtp.gmail.com</code><br>
                                <code>SMTP_PORT=587</code><br>
                                <code>SMTP_USER=your-email@gmail.com</code><br>
                                <code>SMTP_PASS=your-app-password</code><br>
                                <code>FROM_EMAIL=your-email@gmail.com</code>
                            </div>
                            <p><strong>For now, use this verification link:</strong></p>
                            <div class="alert alert-success">
                                <a href="${response.verificationUrl}" target="_blank" class="btn btn-success">
                                    <i class="fas fa-external-link-alt me-2"></i>Verify Email Now
                                </a>
                            </div>
                        `;
                }

                modal.show();
            } catch (error) {
                alert('Error sending verification email: ' + error.message);
            }
        });

        // Resend verification email
        document.getElementById('resend-verification-btn')?.addEventListener('click', async function () {
            try {
                const response = await makeApiCall('/api/auth/send-verification-email', {
                    method: 'POST'
                });

                alert('Verification email sent!');
            } catch (error) {
                alert('Error resending verification email: ' + error.message);
            }
        });

        // Reset profile form
        document.getElementById('reset-profile-btn')?.addEventListener('click', function () {
            if (confirm('Are you sure you want to reset the form? All changes will be lost.')) {
                loadProfileData();
            }
        });

        // Refresh profile button
        document.getElementById('refresh-profile-btn')?.addEventListener('click', function () {
            loadProfileData();
        });
    });

    // Global variable to track API key visibility state
    let isApiKeyVisible = false;

    // Initialize API key buttons function
    function initializeApiKeyButtons() {
        // Toggle API key visibility
        const toggleBtn = document.getElementById('toggle-api-key');
        const apiKeyInput = document.getElementById('api-key');
        const apiKeyIcon = document.getElementById('api-key-icon');

        if (toggleBtn && apiKeyInput && apiKeyIcon) {
            // Remove existing event listeners to prevent duplicates
            const newToggleBtn = toggleBtn.cloneNode(true);
            toggleBtn.parentNode.replaceChild(newToggleBtn, toggleBtn);

            // Restore previous state if any
            if (isApiKeyVisible) {
                    apiKeyInput.type = 'text';
                    apiKeyIcon.className = 'fas fa-eye-slash';
            }

            newToggleBtn.addEventListener('click', function () {
                // Get fresh references to the input and icon elements
                const currentApiKeyInput = document.getElementById('api-key');
                const currentApiKeyIcon = document.getElementById('api-key-icon');
                
                if (isApiKeyVisible) {
                    // Hide the API key
                    currentApiKeyInput.type = 'password';
                    currentApiKeyIcon.className = 'fas fa-eye';
                    isApiKeyVisible = false;
                } else {
                    // Show the API key
                    currentApiKeyInput.type = 'text';
                    currentApiKeyIcon.className = 'fas fa-eye-slash';
                    isApiKeyVisible = true;
                }
            });
        }

        // Copy API key functionality
        const copyBtn = document.getElementById('copy-api-key');
        if (copyBtn && apiKeyInput) {
            // Remove existing event listeners to prevent duplicates
            const newCopyBtn = copyBtn.cloneNode(true);
            copyBtn.parentNode.replaceChild(newCopyBtn, copyBtn);

            newCopyBtn.addEventListener('click', function () {
                // Get fresh reference to the input element
                const currentApiKeyInput = document.getElementById('api-key');
                const apiKey = currentApiKeyInput.value;
                if (apiKey && apiKey !== 'Not generated') {
                    navigator.clipboard.writeText(apiKey).then(function () {
                        // Show success message
                        const originalHTML = newCopyBtn.innerHTML;
                        newCopyBtn.innerHTML = '<i class="fas fa-check"></i>';
                        newCopyBtn.classList.remove('btn-outline-secondary');
                        newCopyBtn.classList.add('btn-success');

                        setTimeout(function () {
                            newCopyBtn.innerHTML = originalHTML;
                            newCopyBtn.classList.remove('btn-success');
                            newCopyBtn.classList.add('btn-outline-secondary');
                        }, 2000);
                    }).catch(function () {
                        alert('Failed to copy API key to clipboard');
                    });
                } else {
                    alert('No API key to copy');
                }
            });
        }
    }

    // QR Code Modal Functions
    let currentSessionId = null;

    function showQRCodeModal(sessionId) {
        console.log('showQRCodeModal called with sessionId:', sessionId);
        console.log('Current time:', new Date().toISOString());
        currentSessionId = sessionId;
        
        // Clean up any existing backdrops before showing modal
        cleanupModalBackdrops();
        
        const modalElement = document.getElementById('qrCodeModal');
        console.log('Modal element found:', !!modalElement);
        
        // Reset modal title to show connecting state
        const modalTitle = document.querySelector('#qrCodeModal .modal-title');
        if (modalTitle) {
            modalTitle.innerHTML = `
                <i class="fab fa-whatsapp me-2"></i>Connect WhatsApp Session
                <span class="badge bg-warning ms-2">Connecting...</span>
            `;
            console.log('Modal title updated');
        }

        // Reset modal content to show initial loading state with progress
        const container = document.getElementById('qr-code-container');
        console.log('QR container found:', !!container);
        if (container) {
            container.innerHTML = `
                <div class="text-center">
                    <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                        <span class="visually-hidden">Connecting...</span>
                    </div>
                    <p class="text-muted">Connecting to WhatsApp...</p>
                    <p class="text-muted small">This may take up to 60 seconds</p>
                    <div class="progress mt-3" style="height: 8px;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated bg-warning" 
                             role="progressbar" 
                             style="width: 0%" 
                             id="qr-progress-bar"></div>
                    </div>
                    <p class="text-muted small mt-2" id="qr-progress-text">Initializing connection...</p>
                    <p class="text-info small" id="qr-status-text">
                        <i class="fas fa-info-circle me-1"></i>
                        Starting WhatsApp session...
                    </p>
                </div>
            `;
            console.log('QR container updated with progress state');
        } else {
            console.error('QR container not found!');
        }

        // Show modal
        const modal = new bootstrap.Modal(modalElement);
        modal.show();
        console.log('Modal shown, ready for QR code generation...');
        
        // Force a re-render by updating the container again after modal is shown
        setTimeout(() => {
            const container = document.getElementById('qr-code-container');
            if (container) {
                console.log('Force updating QR container after modal show...');
                container.innerHTML = `
                    <div class="text-center">
                        <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                            <span class="visually-hidden">Connecting...</span>
                        </div>
                        <p class="text-muted">Connecting to WhatsApp...</p>
                        <p class="text-muted small">This may take up to 60 seconds</p>
                        <div class="progress mt-3" style="height: 8px;">
                            <div class="progress-bar progress-bar-striped progress-bar-animated bg-warning" 
                                 role="progressbar" 
                                 style="width: 0%" 
                                 id="qr-progress-bar"></div>
                        </div>
                        <p class="text-muted small mt-2" id="qr-progress-text">Initializing connection...</p>
                        <p class="text-info small" id="qr-status-text">
                            <i class="fas fa-info-circle me-1"></i>
                            Starting WhatsApp session...
                        </p>
                    </div>
                `;
                console.log('QR container force updated');
            }
        }, 50);
        
        // Note: QR code generation will be handled by startQRCodeGeneration()
        // which will be called after this function returns
    }

    async function startQRCodeGeneration(sessionId) {
        console.log('Starting QR code generation for session:', sessionId);
        
        // Update modal title to show generation in progress
        const modalTitle = document.querySelector('#qrCodeModal .modal-title');
        if (modalTitle) {
            modalTitle.innerHTML = `
                <i class="fab fa-whatsapp me-2"></i>Connect WhatsApp Session
                <span class="badge bg-warning ms-2">Generating QR...</span>
            `;
        }
        
        // Update modal content to show generation in progress
        const container = document.getElementById('qr-code-container');
        if (container) {
            container.innerHTML = `
                <div class="text-center">
                    <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                        <span class="visually-hidden">Generating QR Code...</span>
                    </div>
                    <p class="text-muted">Generating QR code, please wait...</p>
                    <p class="text-muted small">This may take up to 60 seconds</p>
                    <div class="progress mt-3" style="height: 8px;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated bg-warning" 
                             role="progressbar" 
                             style="width: 0%" 
                             id="qr-progress-bar"></div>
                    </div>
                    <p class="text-muted small mt-2" id="qr-progress-text">Starting generation...</p>
                    <p class="text-info small" id="qr-status-text">
                        <i class="fas fa-info-circle me-1"></i>
                        Initializing...
                    </p>
                </div>
            `;
        }

        // Start polling for QR code
        const maxAttempts = 30; // 30 attempts * 2 seconds = 60 seconds max
        let attempts = 0;

        const pollForQRCode = async () => {
            try {
                attempts++;
                console.log(`Polling for QR code, attempt ${attempts}/${maxAttempts}`);

                // Update progress display
                const progress = Math.min((attempts / maxAttempts) * 100, 100);
                console.log(`Progress: ${Math.round(progress)}% - QR generation in progress...`);
                
                // Update progress elements directly instead of replacing entire container
                const progressBar = document.getElementById('qr-progress-bar');
                const progressText = document.getElementById('qr-progress-text');
                const statusText = document.getElementById('qr-status-text');
                
                console.log('Progress elements found:', {
                    progressBar: !!progressBar,
                    progressText: !!progressText,
                    statusText: !!statusText
                });
                
                if (progressBar) {
                    const progressBarColor = progress < 30 ? 'bg-danger' : progress < 70 ? 'bg-warning' : 'bg-success';
                    progressBar.style.width = `${progress}%`;
                    progressBar.setAttribute('aria-valuenow', progress);
                    progressBar.className = `progress-bar progress-bar-striped progress-bar-animated ${progressBarColor}`;
                    console.log('Progress bar updated to:', progress + '%');
                } else {
                    console.error('Progress bar element not found!');
                }
                
                if (progressText) {
                    progressText.innerHTML = `
                        <i class="fas fa-clock me-1"></i>
                        Attempt ${attempts}/${maxAttempts} - ${Math.round(progress)}% complete
                    `;
                    console.log('Progress text updated');
                } else {
                    console.error('Progress text element not found!');
                }
                
                if (statusText) {
                    let statusMessage = '';
                    if (progress < 30) {
                        statusMessage = 'Starting generation...';
                    } else if (progress < 70) {
                        statusMessage = 'Generating QR code...';
                    } else {
                        statusMessage = 'Almost ready...';
                    }
                    statusText.innerHTML = `
                        <i class="fas fa-info-circle me-1"></i>
                        ${statusMessage}
                    `;
                    console.log('Status text updated');
                } else {
                    console.error('Status text element not found!');
                }
                
                console.log(`Progress updated: ${progress}% - ${attempts}/${maxAttempts} attempts`);
                
                // If elements are not found, fallback to replacing entire container
                if (!progressBar || !progressText || !statusText) {
                    console.log('Elements not found, using fallback container replacement...');
                    const container = document.getElementById('qr-code-container');
                    if (container) {
                        const progressBarColor = progress < 30 ? 'bg-danger' : progress < 70 ? 'bg-warning' : 'bg-success';
                        let statusMessage = '';
                        if (progress < 30) {
                            statusMessage = 'Starting generation...';
                        } else if (progress < 70) {
                            statusMessage = 'Generating QR code...';
                        } else {
                            statusMessage = 'Almost ready...';
                        }
                        
                        container.innerHTML = `
                            <div class="text-center">
                                <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                                    <span class="visually-hidden">Generating QR Code...</span>
                                </div>
                                <p class="text-muted">Generating QR code, please wait...</p>
                                <p class="text-muted small">This may take up to 60 seconds</p>
                                <div class="progress mt-3" style="height: 8px;">
                                    <div class="progress-bar progress-bar-striped progress-bar-animated ${progressBarColor}" 
                                         role="progressbar" 
                                         style="width: ${progress}%"
                                         aria-valuenow="${progress}" 
                                         aria-valuemin="0" 
                                         aria-valuemax="100">
                                    </div>
                                </div>
                                <p class="text-muted small mt-2">
                                    <i class="fas fa-clock me-1"></i>
                                    Attempt ${attempts}/${maxAttempts} - ${Math.round(progress)}% complete
                                </p>
                                <p class="text-info small">
                                    <i class="fas fa-info-circle me-1"></i>
                                    ${statusMessage}
                                </p>
                            </div>
                        `;
                        console.log('Container replaced with fallback content');
                    }
                }
                
                // Update browser tab title to show progress
                const originalTitle = document.title;
                document.title = `[${Math.round(progress)}%] ${originalTitle}`;

                const response = await makeApiCall(`/api/whatsapp/sessions/${sessionId}/qr`);
                console.log('QR code poll response:', response);

                if (response.success && response.qrCode) {
                    console.log('QR code found, displaying...');
                    
                    // Reset browser tab title
                    document.title = document.title.replace(/^\[\d+%\]\s*/, '');
                    
                    await loadQRCode(sessionId, response);
                    return; // Success, stop polling
                } else if (response.success && !response.qrCode) {
                    // QR code generation in progress, continue polling
                    console.log('QR code generation in progress, continuing to poll...');
                    
                    // Update modal title to show progress
                    const modalTitle = document.querySelector('#qrCodeModal .modal-title');
                    if (modalTitle) {
                        modalTitle.innerHTML = `
                            <i class="fab fa-whatsapp me-2"></i>Connect WhatsApp Session
                            <span class="badge bg-warning ms-2">Generating... ${Math.round(progress)}%</span>
                        `;
                    }
                    
                    if (attempts < maxAttempts) {
                        setTimeout(pollForQRCode, 2000); // Poll every 2 seconds
                    } else {
                        throw new Error('QR code generation timeout after 60 seconds');
                    }
                } else {
                    throw new Error(response.message || 'Failed to generate QR code');
                }
            } catch (error) {
                console.error('Error polling for QR code:', error);
                
                // Reset browser tab title
                document.title = document.title.replace(/^\[\d+%\]\s*/, '');
                
                // Show error in modal
                if (container) {
                    container.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Error generating QR code: ${error.message}
                        </div>
                    `;
                }
            }
        };

        // Start polling
        pollForQRCode();
    }

    async function loadQRCode(sessionId, qrCodeData = null) {
        try {
            console.log('Loading QR code for session:', sessionId);
            
            let response;
            if (qrCodeData) {
                // Use provided QR code data
                response = qrCodeData;
                console.log('Using provided QR code data:', response);
            } else {
                // Make API call
                response = await makeApiCall(`/api/whatsapp/sessions/${sessionId}/qr`);
                console.log('QR code response:', response);
            }

            if (response.success && response.qrCode) {
                const container = document.getElementById('qr-code-container');
                if (!container) {
                    console.error('QR code container not found');
                    return;
                }
                
                // Reset modal title to normal
                const modalTitle = document.querySelector('#qrCodeModal .modal-title');
                if (modalTitle) {
                    modalTitle.innerHTML = `
                        <i class="fab fa-whatsapp me-2"></i>Connect WhatsApp Session
                    `;
                }
                
                // Check if qrCode already has data:image prefix
                const qrCodeSrc = response.qrCode.startsWith('data:image') 
                    ? response.qrCode 
                    : `data:image/png;base64,${response.qrCode}`;
                
                container.innerHTML = `
                        <div class="qr-code-wrapper">
                            <img src="${qrCodeSrc}" 
                                 alt="WhatsApp QR Code" 
                                 class="img-fluid border rounded shadow-sm"
                                 style="max-width: 300px;">
                        </div>
                        <p class="text-success mt-2">
                            <i class="fas fa-check-circle me-1"></i>
                            QR Code generated successfully
                        </p>
                    `;
                console.log('QR code displayed successfully');
            } else {
                throw new Error(response.message || 'Failed to generate QR code');
            }
        } catch (error) {
            console.error('Error loading QR code:', error);
            const container = document.getElementById('qr-code-container');
            if (container) {
                container.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Error loading QR code: ${error.message}
                        </div>
                    `;
            }
        }
    }

    // Refresh QR code button
    document.getElementById('refresh-qr-btn')?.addEventListener('click', function () {
        if (currentSessionId) {
            loadQRCode(currentSessionId);
        }
    });

    // Auto-refresh QR code every 2 minutes
    setInterval(() => {
        if (currentSessionId && document.getElementById('qrCodeModal').classList.contains('show')) {
            loadQRCode(currentSessionId);
        }
    }, 120000); // 2 minutes

    // Global cleanup function for modal backdrops
    function cleanupModalBackdrops() {
        const backdrops = document.querySelectorAll('.modal-backdrop');
        backdrops.forEach(backdrop => backdrop.remove());
        document.body.classList.remove('modal-open');
        document.body.style.overflow = '';
        document.body.style.paddingRight = '';
        console.log('Modal backdrops cleaned up manually');
    }

    // Add keyboard shortcut to clean up backdrops (Ctrl+Shift+B)
    document.addEventListener('keydown', function(e) {
        if (e.ctrlKey && e.shiftKey && e.key === 'B') {
            e.preventDefault();
            cleanupModalBackdrops();
            alert('Modal backdrops cleaned up!');
        }
    });

    // Add keyboard shortcut to test modal update (Ctrl+Shift+M)
    document.addEventListener('keydown', function(e) {
        if (e.ctrlKey && e.shiftKey && e.key === 'M') {
            e.preventDefault();
            console.log('Testing modal update...');
            const container = document.getElementById('qr-code-container');
            if (container) {
                container.innerHTML = `
                    <div class="text-center">
                        <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                            <span class="visually-hidden">Testing...</span>
                        </div>
                        <p class="text-muted">Test Modal Update</p>
                        <p class="text-success">Modal content updated successfully!</p>
                    </div>
                `;
                console.log('Modal test update applied');
                alert('Modal test update applied!');
            } else {
                console.error('QR container not found for test');
                alert('QR container not found!');
            }
        }
    });

    // Global API functions
    function getApiKey() {
        // First try to get API key from currentUser (most reliable)
        let apiKey = '';
        if (window.currentUser && window.currentUser.apiKey) {
            apiKey = window.currentUser.apiKey;
        } else {
            // Fallback to input field
            const apiKeyInput = document.getElementById('api-key');
            apiKey = apiKeyInput ? apiKeyInput.value : '';
        }

        if (!apiKey || apiKey === 'Not generated') {
            throw new Error('API key not found. Please generate an API key first.');
        }

        return apiKey;
    }

    function getJwtToken() {
        // Try to get JWT token from sessionStorage
        const token = sessionStorage.getItem('authToken');
        if (!token || token === 'undefined' || token === 'null') {
            throw new Error('Authentication token not found. Please log in again.');
        }
        return token;
    }

    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
        return null;
    }

    function getApiKeyHeaders() {
        const apiKey = getApiKey();
        return {
            'Content-Type': 'application/json',
            'x-api-key': apiKey
        };
    }

    function getJwtHeaders() {
        const token = getJwtToken();
        return {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
        };
    }

    async function makeApiCall(endpoint, options = {}) {
        try {
            console.log('makeApiCall called with endpoint:', endpoint);
            // Check if user is logged in first
            const isLoggedIn = sessionStorage.getItem('isLoggedIn') === 'true';
            if (!isLoggedIn) {
                throw new Error('User not logged in');
            }

            // Determine authentication method based on endpoint
            let headers;
            if (endpoint.includes('/api/whatsapp/')) {
                headers = getApiKeyHeaders();
            } else if (endpoint.includes('/api/analytics/') || endpoint.includes('/api/user/') || endpoint.includes('/api/auth/')) {
                headers = getJwtHeaders();
            } else {
                // Default to JWT for other endpoints
                headers = getJwtHeaders();
            }

            const response = await fetch(endpoint, {
                headers: {
                    ...headers,
                    ...options.headers
                },
                ...options
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));

                // Handle specific authentication errors
                if (response.status === 401) {
                    if (errorData.error === 'Access token required') {
                        throw new Error('Please log in to access this feature.');
                    } else if (errorData.error === 'API key required') {
                        throw new Error('Please generate an API key first.');
                    } else if (errorData.error === 'Invalid API key') {
                        throw new Error('Invalid API key. Please generate a new one.');
                    }
                }

                throw new Error(errorData.message || errorData.error || `HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            // Only log errors that aren't expected authentication issues
            if (!error.message.includes('not logged in') &&
                !error.message.includes('log in') &&
                !error.message.includes('API key')) {
                console.error('API call failed:', error);
            }
            throw error;
        }
    }

    // Load dashboard overview data
    async function loadDashboardData() {
        try {
            showLoading('overview');

            // Check if user is logged in
            const isLoggedIn = sessionStorage.getItem('isLoggedIn') === 'true';
            if (!isLoggedIn) {
                // Show default data for non-logged in users
                updateElement('messages-sent', '0');
                updateElement('active-sessions', '0');
                updateElement('delivery-rate', '0%');
                updateElement('total-sessions', '0');
                updateElement('plan-badge', 'Free Plan');
                hideLoading('overview');
                return;
            }

            // Check if JWT token exists
            const token = sessionStorage.getItem('authToken');
            if (!token) {
                updateElement('messages-sent', '0');
                updateElement('active-sessions', '0');
                updateElement('delivery-rate', '0%');
                updateElement('total-sessions', '0');
                updateElement('plan-badge', 'Free Plan');
                hideLoading('overview');
                return;
            }

            const response = await makeApiCall('/api/analytics/dashboard?period=30d');
            const stats = response.data.overview;

            // Update stats cards
            updateElement('messages-sent', (stats.totalMessages || 0).toLocaleString());
            updateElement('active-sessions', stats.activeSessions || 0);
            updateElement('delivery-rate', calculateDeliveryRate(stats) + '%');
            updateElement('total-sessions', stats.totalSessions || 0);

            // Update plan badge
            updateElement('plan-badge', stats.plan ? stats.plan.charAt(0).toUpperCase() + stats.plan.slice(1) + ' Plan' : 'Free Plan');

            hideLoading('overview');
        } catch (error) {
            console.error('Error loading dashboard data:', error);
            hideLoading('overview');

            // Show user-friendly error message
            if (error.message.includes('log in')) {
                showError('overview', 'Please log in to view dashboard data');
            } else {
                showError('overview', 'Failed to load dashboard data: ' + error.message);
            }
        }
    }

    // Load section page dynamically
    async function loadSectionPage(section) {
        console.log('loadSectionPage called with section:', section);
        
        try {
            // Show loading state
            const contentContainer = document.getElementById('dashboard-content-container');
            if (contentContainer) {
                contentContainer.innerHTML = `
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary mb-3" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="text-muted">Loading ${section} page...</p>
                    </div>
                `;
            }

            // Load the section page content
            const response = await fetch(`/api/dashboard/section/${section}`, {
                headers: {
                    'Authorization': `Bearer ${sessionStorage.getItem('authToken')}`,
                    'Content-Type': 'application/json'
                }
            });
            if (!response.ok) {
                throw new Error(`Failed to load ${section} page: ${response.statusText}`);
            }
            
            const html = await response.text();
            if (contentContainer) {
                contentContainer.innerHTML = html;
            }

            // Load section-specific data after page is loaded
            await loadSectionData(section);
            
        } catch (error) {
            console.error('Error loading section page:', error);
            const contentContainer = document.getElementById('dashboard-content-container');
            if (contentContainer) {
                contentContainer.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Error loading ${section} page: ${error.message}
                    </div>
                `;
            }
        }
    }

    // Load section-specific data
    async function loadSectionData(section) {
        console.log('loadSectionData called with section:', section);
        switch (section) {
            case 'overview':
                await loadDashboardData();
                break;
            case 'sessions':
                await loadSessionsData();
                break;
            case 'messages':
                await loadMessagesData();
                break;
            case 'webhooks':
                await loadWebhooksData();
                break;
            case 'analytics':
                await loadAnalyticsData();
                break;
            case 'billing':
                await loadBillingData();
                break;
            case 'profile':
                console.log('Loading profile data...');
                await loadProfileData();
                break;
        }
    }

    // Load sessions data
    async function loadSessionsData() {
        try {
            showLoading('sessions');

            // Check if user is logged in
            const isLoggedIn = sessionStorage.getItem('isLoggedIn') === 'true';
            if (!isLoggedIn) {
                showError('sessions', 'Please log in to view sessions');
                hideLoading('sessions');
                return;
            }

            // Check if API key exists for WhatsApp endpoints
            const apiKey = document.getElementById('api-key')?.value;
            if (!apiKey || apiKey === 'Not generated') {
                showError('sessions', 'Please generate an API key first');
                hideLoading('sessions');
                return;
            }

            const response = await makeApiCall('/api/whatsapp/sessions');
            console.log('Sessions API response:', response);
            
            // Handle different response structures
            const sessions = response.data?.sessions || response.sessions || response.data || [];
            
            // Debug: Log the first session to see its structure
            if (sessions.length > 0) {
                console.log('First session structure:', sessions[0]);
            }
            
            // Ensure sessions is an array
            if (!Array.isArray(sessions)) {
                console.error('Sessions data is not an array:', sessions);
                showError('sessions', 'Invalid sessions data format');
                hideLoading('sessions');
                return;
            }

            const container = document.getElementById('sessions-container');
            if (sessions.length === 0) {
                container.innerHTML = `
                        <div class="col-12">
                            <div class="text-center py-5">
                                <i class="fas fa-mobile-alt fa-3x text-muted mb-3"></i>
                                <h5 class="text-muted">No sessions yet</h5>
                                <p class="text-muted">Create your first WhatsApp session to get started</p>
                                <button class="btn btn-primary" id="create-first-session-btn">
                                    <i class="fas fa-plus me-2"></i>Create Session
                                </button>
                            </div>
                        </div>
                    `;
            } else {
                // Render sessions with error handling
                try {
                    container.innerHTML = sessions.map((session, index) => {
                        try {
                            return `
                                <div class="col-md-6">
                                    <div class="card session-card">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-start mb-3">
                                                <h5>Session #${index + 1}</h5>
                                                <span class="badge bg-${session.isConnected ? 'success' : 'secondary'}">
                                                    ${session.isConnected ? 'Connected' : 'Disconnected'}
                                                </span>
                                            </div>
                                            <p><strong>Session ID:</strong> ${session.sessionId || 'Unknown'}</p>
                                            <p><strong>Phone:</strong> ${session.phoneNumber || 'Not connected'}</p>
                                            <p><strong>Status:</strong> ${session.isConnected ? 'Connected' : 'Disconnected'}</p>
                                            <p><strong>Created:</strong> ${session.createdAt ? new Date(session.createdAt).toLocaleDateString() : 'Unknown'}</p>
                                            <p><strong>Messages:</strong> ${session.messageStats ? session.messageStats.total || 0 : 0} total (${session.messageStats ? session.messageStats.sent || 0 : 0} sent, ${session.messageStats ? session.messageStats.received || 0 : 0} received)</p>
                                            <div class="btn-group" role="group">
                                                ${session.isConnected ?
                                    `<button class="btn btn-outline-danger btn-sm" data-action="disconnect-session" data-session="${session.sessionId}">
                                                        <i class="fas fa-unlink me-1"></i>Disconnect
                                                    </button>` :
                                    `<button class="btn btn-outline-primary btn-sm" data-action="connect-session" data-session="${session.sessionId}">
                                                        <i class="fas fa-link me-1"></i>Connect
                                                    </button>`
                                }
                                                <button class="btn btn-outline-danger btn-sm" 
                                                        data-action="delete-session" 
                                                        data-session="${session.sessionId}"
                                                        title="Delete Session">
                                                    <i class="fas fa-trash me-1"></i>Delete
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `;
                        } catch (sessionError) {
                            console.error('Error rendering session:', sessionError, session);
                            return `
                                <div class="col-md-6">
                                    <div class="card session-card">
                                        <div class="card-body">
                                            <div class="alert alert-warning">
                                                <i class="fas fa-exclamation-triangle me-2"></i>
                                                Error loading session data
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `;
                        }
                    }).join('');
                } catch (renderError) {
                    console.error('Error rendering sessions:', renderError);
                    container.innerHTML = `
                        <div class="col-12">
                            <div class="alert alert-danger">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Error rendering sessions data
                            </div>
                        </div>
                    `;
                }
            }

            hideLoading('sessions');
        } catch (error) {
            console.error('Error loading sessions data:', error);
            hideLoading('sessions');

            if (error.message.includes('log in')) {
                showError('sessions', 'Please log in to view sessions');
            } else if (error.message.includes('API key')) {
                showError('sessions', 'Please generate an API key first');
            } else {
                showError('sessions', 'Failed to load sessions data: ' + error.message);
            }
        }
    }

    // Load messages data
    async function loadMessagesData() {
        try {
            showLoading('messages');
            // Get messages from all sessions
            const response = await makeApiCall('/api/analytics/messages?period=7d');
            console.log('Messages API response:', response);
            
            // Handle different response structures
            const timeSeries = response.data?.timeSeries || response.timeSeries || [];
            
            // Ensure timeSeries is an array
            if (!Array.isArray(timeSeries)) {
                console.error('TimeSeries data is not an array:', timeSeries);
                showError('messages', 'Invalid messages data format');
                hideLoading('messages');
                return;
            }

            // Update messages table with recent data
            const messagesTable = document.getElementById('messages-table');
            if (timeSeries && timeSeries.length > 0) {
                // This would be populated with actual message data
                // For now, we'll show the time series data
                messagesTable.innerHTML = timeSeries.slice(0, 10).map((item, index) => `
                        <tr>
                            <td><code>msg_${index + 1}</code></td>
                            <td>+1234567890</td>
                            <td>Sample message from ${item._id}</td>
                            <td><span class="badge bg-success">Delivered</span></td>
                            <td>${new Date().toLocaleTimeString()}</td>
                        </tr>
                    `).join('');
            } else {
                messagesTable.innerHTML = `
                        <tr>
                            <td colspan="5" class="text-center text-muted">No messages found</td>
                        </tr>
                    `;
            }

            hideLoading('messages');
        } catch (error) {
            console.error('Error loading messages data:', error);
            hideLoading('messages');
            showError('messages', 'Failed to load messages data');
        }
    }

    // Load webhooks data
    async function loadWebhooksData() {
        try {
            showLoading('webhooks');
            // Webhook data would come from a webhook management API
            // For now, we'll show placeholder data
            hideLoading('webhooks');
        } catch (error) {
            console.error('Error loading webhooks data:', error);
            hideLoading('webhooks');
            showError('webhooks', 'Failed to load webhooks data');
        }
    }

    // Load analytics data
    async function loadAnalyticsData() {
        try {
            showLoading('analytics');
            const response = await makeApiCall('/api/analytics/dashboard?period=30d');
            const stats = response.data;

            // Update analytics metrics
            updateElement('delivery-rate-analytics', calculateDeliveryRate(stats.overview) + '%');
            updateElement('total-messages-analytics', (stats.overview.totalMessages || 0).toLocaleString());
            updateElement('active-sessions-analytics', stats.overview.activeSessions || 0);

            // Update message status distribution
            if (stats.messageStatus) {
                const statusData = stats.messageStatus;
                const total = Object.values(statusData).reduce((sum, count) => sum + count, 0);

                // Update status chart data (this would integrate with Chart.js)
                console.log('Message status data:', statusData);
            }

            hideLoading('analytics');
        } catch (error) {
            console.error('Error loading analytics data:', error);
            hideLoading('analytics');
            showError('analytics', 'Failed to load analytics data');
        }
    }

    // Load billing data
    async function loadBillingData() {
        try {
            showLoading('billing');
            const response = await makeApiCall('/api/auth/profile');
            const user = response.user;

            // Update billing information
            if (user && user.subscription) {
                updateElement('plan-name', user.subscription.plan || 'Free');
                updateElement('plan-status', user.subscription.status || 'active');
                updateElement('next-billing', user.subscription.nextBillingDate || 'N/A');
            }

            hideLoading('billing');
        } catch (error) {
            console.error('Error loading billing data:', error);
            hideLoading('billing');
            showError('billing', 'Failed to load billing data');
        }
    }

    // Load profile data
    async function loadProfileData() {
        try {
            console.log('loadProfileData called');
            showLoading('profile');
            const response = await makeApiCall('/api/auth/profile');
            console.log('Profile API response:', response);
            const user = response.user;

            if (user) {
                console.log('Profile data loaded:', user); // Debug log

                // Update profile form fields
                updateElement('profile-name', user.name || '');
                updateElement('profile-email', user.email || '');
                updateElement('profile-phone', user.profile?.phone || '');
                updateElement('profile-company', user.profile?.company || '');
                updateElement('profile-bio', user.profile?.bio || '');

                // Debug: Check if form fields exist
                console.log('Form fields check:');
                console.log('profile-name:', document.getElementById('profile-name'));
                console.log('profile-email:', document.getElementById('profile-email'));
                console.log('profile-phone:', document.getElementById('profile-phone'));
                console.log('profile-company:', document.getElementById('profile-company'));
                console.log('profile-bio:', document.getElementById('profile-bio'));

                // Update account status
                const emailVerifiedBadge = document.getElementById('email-verified-badge');
                if (emailVerifiedBadge) {
                    emailVerifiedBadge.textContent = user.isEmailVerified ? 'Verified' : 'Unverified';
                    emailVerifiedBadge.className = user.isEmailVerified ? 'badge bg-success' : 'badge bg-warning';
                }

                updateElement('account-created-date', user.createdAt ? new Date(user.createdAt).toLocaleDateString() : '-');
                updateElement('last-login-date', user.lastLoginAt ? new Date(user.lastLoginAt).toLocaleDateString() : '-');

                const planBadge = document.getElementById('profile-plan-badge');
                if (planBadge) {
                    const plan = user.subscription?.plan || 'free';
                    planBadge.textContent = plan.charAt(0).toUpperCase() + plan.slice(1);
                    planBadge.className = `badge ${plan === 'free' ? 'bg-secondary' : plan === 'basic' ? 'bg-primary' : 'bg-success'}`;
                }

                // Update email verification status
                const verifyBtn = document.getElementById('verify-email-btn');
                const emailStatusText = document.getElementById('email-status-text');

                if (user.isEmailVerified) {
                    if (verifyBtn) {
                        verifyBtn.innerHTML = '<i class="fas fa-check me-1"></i>Verified';
                        verifyBtn.className = 'btn btn-outline-success';
                        verifyBtn.disabled = true;
                    }
                    if (emailStatusText) {
                        emailStatusText.textContent = 'Your email is verified';
                        emailStatusText.className = 'form-text text-success';
                    }
                } else {
                    if (verifyBtn) {
                        verifyBtn.innerHTML = '<i class="fas fa-envelope me-1"></i>Verify';
                        verifyBtn.className = 'btn btn-outline-warning';
                        verifyBtn.disabled = false;
                    }
                    if (emailStatusText) {
                        emailStatusText.textContent = 'Please verify your email address';
                        emailStatusText.className = 'form-text text-warning';
                    }
                }
            }

            hideLoading('profile');
        } catch (error) {
            console.error('Error loading profile data:', error);
            hideLoading('profile');
            showError('profile', 'Failed to load profile data');
        }
    }

    // Utility functions
    function calculateDeliveryRate(stats) {
        if (!stats.sentMessages || stats.sentMessages === 0) return '0.0';
        const delivered = stats.messageStatus?.delivered || 0;
        return ((delivered / stats.sentMessages) * 100).toFixed(1);
    }

    function updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
                element.value = value;
            } else {
                element.textContent = value;
            }
            console.log(`Updated ${id}:`, value); // Debug log
        } else {
            console.warn(`Element with id '${id}' not found`); // Debug log
        }
    }

    function showLoading(section) {
        const sectionElement = document.getElementById(`dashboard-${section}`);
        if (sectionElement) {
            // Create loading overlay
            const loadingOverlay = document.createElement('div');
            loadingOverlay.id = `loading-${section}`;
            loadingOverlay.className = 'loading-overlay';
            loadingOverlay.innerHTML = `
                <div class="loading-content">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="text-muted">Loading ${section} data...</p>
                </div>
            `;
            
            // Add loading overlay
            sectionElement.appendChild(loadingOverlay);
        }
    }

    function hideLoading(section) {
        const sectionElement = document.getElementById(`dashboard-${section}`);
        if (sectionElement) {
            const loadingOverlay = document.getElementById(`loading-${section}`);
            if (loadingOverlay) {
                loadingOverlay.remove();
            }
        }
    }

    function showError(section, message) {
        const sectionElement = document.getElementById(`dashboard-${section}`);
        if (sectionElement) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'alert alert-danger';
            errorDiv.textContent = message;
            sectionElement.appendChild(errorDiv);
        }
    }
</script>